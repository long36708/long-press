import{_ as p,a as l,b as i}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as r,c as t,I as s,a7 as b,o}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const v=JSON.parse('{"title":"Babel 教程","description":"","frontmatter":{},"headers":[],"relativePath":"guide/babel.md","filePath":"guide/babel.md","lastUpdated":1712334308000}'),c={name:"guide/babel.md"},u=b(`<h1 id="babel-教程" tabindex="-1">Babel 教程 <a class="header-anchor" href="#babel-教程" aria-label="Permalink to &quot;Babel 教程&quot;">​</a></h1><h2 id="babel-配置文件" tabindex="-1">Babel 配置文件 <a class="header-anchor" href="#babel-配置文件" aria-label="Permalink to &quot;Babel 配置文件&quot;">​</a></h2><p><a href="https://www.jiangruitao.com/babel/config/" target="_blank" rel="noreferrer">https://www.jiangruitao.com/babel/config/</a></p><p>Babel的配置文件是Babel执行时默认会在当前目录寻找的文件，主要有.babelrc，.babelrc.js，babel.config.js和package.json。 它们的配置项都是相同，作用也是一样的，只需要选择其中一种。</p><p>推荐使用后缀名是js配置文件，因为可以使用js做一些逻辑处理，适用性更强。</p><h3 id="plugins插件数组和presets预设数组是有顺序要求的。" tabindex="-1">plugins插件数组和presets预设数组是有顺序要求的。 <a class="header-anchor" href="#plugins插件数组和presets预设数组是有顺序要求的。" aria-label="Permalink to &quot;plugins插件数组和presets预设数组是有顺序要求的。&quot;">​</a></h3><p>如果两个插件或预设都要处理同一个代码片段，那么会根据插件和预设的顺序来执行。 规则如下：</p><ul><li>插件比预设先执行</li><li>插件执行顺序是插件数组从前向后执行</li><li>预设执行顺序是预设数组从后向前执行</li></ul><h3 id="babel插件和预设的参数" tabindex="-1">Babel插件和预设的参数 <a class="header-anchor" href="#babel插件和预设的参数" aria-label="Permalink to &quot;Babel插件和预设的参数&quot;">​</a></h3><p>每个插件是插件数组的一成员项，每个预设是预设数组的一成员项，默认情况下，成员项都是用字符串来表示的，例如&quot;@babel/preset-env&quot;。</p><p>如果要给插件或预设设置参数，那么成员项就不能写成字符串了，而要改写成一个数组。 数组的第一项是插件或预设的名称字符串，第二项是个对象，该对象用来设置第一项代表的插件或预设的参数。 例如给@babel/preset-env设置参数：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;presets&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    [</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">      &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">        &quot;useBuiltIns&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;entry&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="babel-plugin-transform-runtime" tabindex="-1">@babel/plugin-transform-runtime <a class="header-anchor" href="#babel-plugin-transform-runtime" aria-label="Permalink to &quot;@babel/plugin-transform-runtime&quot;">​</a></h2><p>优化项 能减少babel内公共方法代码的重复的使用带来的问题</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;plugins&quot;: [</span></span>
<span class="line"><span>        [</span></span>
<span class="line"><span>          &quot;@babel/plugin-transform-runtime&quot;,</span></span>
<span class="line"><span>          {</span></span>
<span class="line"><span>            &quot;regenerator&quot;: true</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        ]</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><a href="https://www.jiangruitao.com/babel/transform-runtime/" target="_blank" rel="noreferrer">https://www.jiangruitao.com/babel/transform-runtime/</a></p><p>@babel/plugin-transform-runtime有三大作用，其中之一就是自动移除语法转换后内联的辅助函数（inline Babel helpers），使用@babel/runtime/helpers里的辅助函数来替代。这样就减少了我们手动引入的麻烦。</p><p>@babel/plugin-transform-runtime有三大作用：</p><p>1.自动移除语法转换后内联的辅助函数（inline Babel helpers），使用@babel/runtime/helpers里的辅助函数来替代；</p><p>2.当代码里使用了core-js的API，自动引入@babel/runtime-corejs3/core-js-stable/，以此来替代全局引入的core-js/stable;</p><p>3.当代码里使用了Generator/async函数，自动引入@babel/runtime/regenerator，以此来替代全局引入的regenerator-runtime/runtime；</p><p>API转换主要是给开发JS库或npm包等的人用的，我们的前端工程一般仍然使用polyfill补齐API。</p><p>可以想象，如果开发JS库的人使用polyfill补齐API，我们前端工程也使用polyfill补齐API，但JS库的polyfill版本或内容与我们前端工程的不一致，那么我们引入该JS库后很可能会导致我们的前端工程出问题。 所以，开发JS库或npm包等的人会用到API转换功能。</p><p>当然，我们前端工程开发的时候也是可以使用@babel/plugin-transform-runtime的API转换功能，毕竟没有污染全局环境，不会有任何冲突。@babel/plugin-transform-runtime的默认设置下，就是对generators/async开启了API转换功能。</p><h2 id="babel-plugin-module-resolver" tabindex="-1">babel-plugin-module-resolver <a class="header-anchor" href="#babel-plugin-module-resolver" aria-label="Permalink to &quot;babel-plugin-module-resolver&quot;">​</a></h2><p>是一个Babel模块解析插件, 在.babelrc中可以配置模块的导入搜索路径</p><p>简单的来说就跟webpack的resolve.alias配置很相似.举例:</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>    // .bablerc文件内</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;plugins&quot;: [</span></span>
<span class="line"><span>        [&quot;module-resolver&quot;, {</span></span>
<span class="line"><span>          &quot;root&quot;: [&quot;./&quot;],</span></span>
<span class="line"><span>          &quot;alias&quot;: {</span></span>
<span class="line"><span>            &quot;P&quot;:&quot;./app/p&quot;</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        }]</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>如上配置后,在项目里面如果有如下路径都会被解析成配置项里面的alias对应的路径</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //import Mp from &#39;../../p/MyPropTypes&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    import Mp from &#39;P/MyPropTypes&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    import MyUtilFn from &#39;utils/MyUtilFn&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //import MyUtilFn from &#39;../../../../utils/MyUtilFn&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,29);function m(h,d,g,k,f,B){const a=p,n=l,e=i;return o(),t("div",null,[u,s(a,{readTime:"3",words:"914"}),s(n),s(e)])}const A=r(c,[["render",m]]);export{v as __pageData,A as default};
