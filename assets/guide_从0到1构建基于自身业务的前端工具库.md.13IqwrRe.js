import{_ as l,a as p,b as e}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as t,c as h,I as s,a7 as k,o as r}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const E=JSON.parse('{"title":"从 0 到 1 构建基于自身业务的前端工具库","description":"","frontmatter":{},"headers":[],"relativePath":"guide/从0到1构建基于自身业务的前端工具库.md","filePath":"guide/从0到1构建基于自身业务的前端工具库.md","lastUpdated":1719758327000}'),d={name:"guide/从0到1构建基于自身业务的前端工具库.md"},c=k(`<h1 id="从-0-到-1-构建基于自身业务的前端工具库" tabindex="-1">从 0 到 1 构建基于自身业务的前端工具库 <a class="header-anchor" href="#从-0-到-1-构建基于自身业务的前端工具库" aria-label="Permalink to &quot;从 0 到 1 构建基于自身业务的前端工具库&quot;">​</a></h1><p>搜索关键词：工具库 工具包</p><p><a href="https://my.oschina.net/u/4090830/blog/8644831" target="_blank" rel="noreferrer">https://my.oschina.net/u/4090830/blog/8644831</a></p><h2 id="rollup-全家桶" tabindex="-1">rollup 全家桶 <a class="header-anchor" href="#rollup-全家桶" aria-label="Permalink to &quot;rollup 全家桶&quot;">​</a></h2><p>•  rollup（工具库打包构建核心包）</p><p>•  rollup-plugin-livereload（rollup 插件，热更新，方便本地 debugger 开发）</p><p>•  rollup-plugin-serve（rollup 插件，本地服务代理，方便在本地 html 中调试工具）</p><p>•  rollup-plugin-terser（rollup 插件，代码压缩混淆）</p><p>•  rollup-plugin-visualizer（rollup 插件，可视化并分析 Rollup bundle，以查看模块占用）</p><p>•  @rollup/plugin-babel（rollup 插件，rollup 的 babel 插件，ES6 转 ES5）</p><p>•  @rollup/plugin-commonjs（rollup 插件，用来将 CommonJS 模块转换为 ES6，这样它们就可以包含在 Rollup 包中）</p><p>•  @rollup/plugin-json（rollup 插件，它将.json 文件转换为 ES6 模块）</p><p>•  @rollup/plugin-node-resolve（rollup 插件，它使用节点解析算法定位模块，用于在节点模块中使用第三方 node_modules 包）</p><p>•  @rollup/plugin-typescript（rollup 插件，对 typescript 的支持，将 typescript 进行 tsc 转为 js）</p><h2 id="typescript-相关" tabindex="-1">typescript 相关 <a class="header-anchor" href="#typescript-相关" aria-label="Permalink to &quot;typescript 相关&quot;">​</a></h2><p>•  typescript（使用 ts 开发工具库）</p><p>•  tslib（TypeScript 的运行库，它包含了 TypeScript 所有的帮助函数）</p><p>•  @typescript-eslint/eslint-plugin（TypeScript 的 eslint 插件，约束 ts 书写规范）</p><p>•  @typescript-eslint/parser（ESLint 解析器，它利用 TypeScript ESTree 来允许 ESLint 检测 TypeScript 源代码）</p><h2 id="文档相关" tabindex="-1">文档相关 <a class="header-anchor" href="#文档相关" aria-label="Permalink to &quot;文档相关&quot;">​</a></h2><p>•  typedoc（TypeScript 项目的文档生成器）</p><p>•  gulp（使用 gulp 构建文档系统）</p><p>•  gulp-typedoc（Gulp 插件来执行 TypeDoc 工具）</p><p>•  browser-sync（文档系统热更新）</p><h2 id="单元测试相关" tabindex="-1">单元测试相关 <a class="header-anchor" href="#单元测试相关" aria-label="Permalink to &quot;单元测试相关&quot;">​</a></h2><p>•  jest（一款优雅、简洁的 JavaScript 测试框架）</p><p>•  @types/jest（Jest 的类型定义）</p><p>•  ts-jest（一个支持源映射的 Jest 转换器，允许您使用 Jest 来测试用 TypeScript 编写的项目）</p><p>•  @babel/preset-typescript（TypeScript 的 Babel 预设）</p><h2 id="其他依赖" tabindex="-1">其他依赖 <a class="header-anchor" href="#其他依赖" aria-label="Permalink to &quot;其他依赖&quot;">​</a></h2><p>•  eslint（代码规范约束）</p><p>•  @babel/core（@rollup/plugin-babel 依赖的 babel 解析插件）</p><p>•  @babel/plugin-transform-runtime（babel 转译依赖）</p><p>•  @babel/preset-env（babel 转译依赖）</p><p>•  chalk（控制台字符样式）</p><p>•  rimraf（UNIX 命令 rm -rf 用于 node）</p><p>•  cross-env（跨平台设置 node 环境变量）</p><h2 id="安装项目依赖" tabindex="-1">安装项目依赖 <a class="header-anchor" href="#安装项目依赖" aria-label="Permalink to &quot;安装项目依赖&quot;">​</a></h2><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> typescript</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> tslib</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> rollup</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> rollup-plugin-livereload</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> rollup-plugin-serve</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> rollup-plugin-terser</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> rollup-plugin-visualizer</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">@rollup/plugin-babel</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @rollup/plugin-commonjs</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @rollup/plugin-json</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @rollup/plugin-node-resolve</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @rollup/plugin-typescript</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">@babel/core</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @babel/plugin-transform-runtime</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @babel/preset-env</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> rimraf</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> lodash</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> chalk@^4.1.2</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>这里遇到一个坑，关于最新 chalk5.0.0 不支持在 nodejs 中 require () 导入，所以锁定包版本 chalk@^4.1.2</p></blockquote><h2 id="组织项目打包构建-scripts-目录结构" tabindex="-1">组织项目打包构建 SCRIPTS 目录结构 <a class="header-anchor" href="#组织项目打包构建-scripts-目录结构" aria-label="Permalink to &quot;组织项目打包构建 SCRIPTS 目录结构&quot;">​</a></h2><ol><li>生成 rollup 配置项函数核心代码：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> moduleName</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> camelCase</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 当format为iife和umd时必须提供，将作为全局变量挂在window下：window.moduleName=...</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> banner</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> generateBanner</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 包说明文案</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 生成rollup配置文件函数</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> generateConfigs</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">options</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">input</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">outputFile</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> options</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">chalk</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">greenBright</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`获取打包入口：</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [];</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> pushPlugins</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> ({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">format</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">plugins</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ext</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">    result</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">      input</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 打包入口文件</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">      external</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [], </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 如果打包出来的文件有项目依赖，可以在这里配置是否将项目依赖一起打到包里面还是作为外部依赖</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 打包出口文件</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">      output</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        file</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">outputFile</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">ext</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 出口文件名称</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        sourcemap</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// // 是否生成sourcemap</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        format</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 打包的模块化格式</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        name</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> moduleName</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 当format为iife和umd时必须提供，将作为全局变量挂在window下：window.moduleName=...</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        exports</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;named&#39;</span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> /** Disable warning for default imports */</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        banner</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 打包出来的文件在最顶部的说明文案</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        globals</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {} </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 如果external设置了打包忽略的项目依赖，在此配置，项目依赖的全局变量</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">      plugins</span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // rollup插件</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">  buildType</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">format</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ext</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> plugins</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">defaultPlugins</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 生产环境加入包分析以及代码压缩</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">    plugins</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">      ...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">      visualizer</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        gzipSize</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        brotliSize</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">      }),</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">      terser</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    ];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">    pushPlugins</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">format</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">ext</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><ol start="2"><li>rollup 在打包构建的过程中需要进行 babel 的转译，需要在根目录添加.babelrc 文件告知 babel：</li></ol><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;presets&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    [</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">      &quot;@babel/preset-env&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;plugins&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;@babel/plugin-transform-runtime&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="3"><li>此时距离打包构建工具库只差一步之遥，配置打包脚本命令，在 package.json 中配置命令：</li></ol><div class="language-json5 vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;scripts&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // rollup打包</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;build&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;rimraf lib &amp;&amp; rollup -c ./scripts/rollup.config.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="架构搭建优化" tabindex="-1">架构搭建优化 <a class="header-anchor" href="#架构搭建优化" aria-label="Permalink to &quot;架构搭建优化&quot;">​</a></h2><ol><li>自动构建入口文件核心代码：</li></ol><p>根据 src &gt; modules 下目录结构自动生成入口文件 index.ts</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// build-entry.js</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;node:fs&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// node fs模块</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> chalk</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;chalk&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 自定义输出样式</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">resolveFile</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">getEntries</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;./utils&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> srcIndexContent</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> \`</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">// tips：此文件是自动生成的，无需手动添加</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">getEntries</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">resolveFile</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;src/modules/*&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">baseName</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">entry</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> moduleIndexContent</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> \`</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">// tips：此文件是自动生成的，无需手动添加</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 判断是否文件夹</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> stats</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">statSync</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">stats</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">isDirectory</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">      getEntries</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">/*.ts\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">baseName</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">        baseName</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> baseName</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;.&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">)[</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">baseName</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">includes</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;index&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">          moduleIndexContent</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> +=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> \`</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">export * from &#39;./</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">baseName</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">      });</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">      fs</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">writeFileSync</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">/index.ts\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">moduleIndexContent</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;utf-8&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">      srcIndexContent</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> +=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> \`</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">export * from &#39;./modules/</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">baseName</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">export * as </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">baseName</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> from &#39;./modules/</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">baseName</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">      srcIndexContent</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> +=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> \`</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">export * from &#39;./modules/</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">baseName</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;.&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">)[</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">  catch</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">e</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">e</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">fs</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">writeFileSync</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">resolveFile</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;src/index.ts&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">srcIndexContent</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;utf-8&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>将 modules 下各种类型工具文件夹下面也自动生成入口文件，除了全部导出，再追加 import * as 模块类名称 类型的导出</p><div class="language-json5 vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;scripts&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;entry&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;node ./scripts/build-entry.js&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;dev&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;rimraf lib &amp;&amp; yarn entry &amp;&amp; cross-env NODE_ENV=development rollup -w -c ./scripts/rollup.config.js&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // -w 表示监听的工具模块的修改</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;build&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;rimraf lib &amp;&amp; yarn entry &amp;&amp; cross-env NODE_ENV=production rollup -c ./scripts/rollup.config.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>配置 scripts &gt; rollup.config.js ，将 NODE_ENV=development 环境加入 rollup 配置，修改生成 rollup 配置项函数核心代码：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>(isProd ? buildType : devType).forEach(({ format, ext }) =&gt; {</span></span>
<span class="line"><span>    let plugins = [...defaultPlugins]</span></span>
<span class="line"><span>    if (isProd) {</span></span>
<span class="line"><span>      // 生产环境加入包分析以及代码压缩</span></span>
<span class="line"><span>      plugins = [...plugins, visualizer({</span></span>
<span class="line"><span>        gzipSize: true,</span></span>
<span class="line"><span>        brotliSize: true</span></span>
<span class="line"><span>      }), terser()]</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>      // 非生产环境加入热更新和本地服务插件，方便本地debugger</span></span>
<span class="line"><span>      plugins = [...plugins, ...[</span></span>
<span class="line"><span>        // 热更新</span></span>
<span class="line"><span>        rollUpLiveLoad({</span></span>
<span class="line"><span>          watch: [&#39;debugger&#39;, &#39;lib&#39;],</span></span>
<span class="line"><span>          delay: 300</span></span>
<span class="line"><span>        }),</span></span>
<span class="line"><span>        // 本地服务代理</span></span>
<span class="line"><span>        rollupServe({</span></span>
<span class="line"><span>          open: true,</span></span>
<span class="line"><span>          // resolveFile(&#39;&#39;)代理根目录原因是为了在ts代码里debugger时可以方便看到调试信息</span></span>
<span class="line"><span>          contentBase: [resolveFile(&#39;debugger&#39;), resolveFile(&#39;lib&#39;), resolveFile(&#39;&#39;)]</span></span>
<span class="line"><span>        })</span></span>
<span class="line"><span>      ]]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    pushPlugins({ format, plugins, ext })</span></span>
<span class="line"><span>  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h2><p>为确保用户使用的工具代码的安全性、正确性以及可靠性，工具库的单元测试必不可少。单元测试选用的是 Facebook 出品的 Jest 测试框架，它对于 TypeScript 有很好的支持。</p><ol><li>环境搭建</li></ol><ol><li>首先全局安装 jest 使用 init 来初始化 jest 配置项</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm jest -g</span></span>
<span class="line"><span>jest --init</span></span>
<span class="line"><span>下面是本人设置的jest的配置项</span></span>
<span class="line"><span>✔ Would you like to use Jest when running &quot;test&quot; script in &quot;package.json&quot;? … yes</span></span>
<span class="line"><span>✔ Would you like to use Typescript for the configuration file? … yes</span></span>
<span class="line"><span>✔ Choose the test environment that will be used for testing › jsdom (browser-like)</span></span>
<span class="line"><span>✔ Do you want Jest to add coverage reports? … yes</span></span>
<span class="line"><span>✔ Which provider should be used to instrument code for coverage? › babel</span></span>
<span class="line"><span>✔ Automatically clear mock calls, instances and results before every test? … yes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>执行完之后根目录会自动生成 jest.config.ts 文件，里面设置了单元测试的配置规则，package.json 里面也多了一个 script 指令 test。</p><ol start="2"><li>关于 jest.config.js 文件配置项具体含义可以查看官网，要想完成 jest 对于 TypeScript 的测试，还需要安装一些依赖：</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> jest</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> ts-jest</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @babel/preset-typescript</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @types/jest</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>jest 还需要借助 .babelrc 去解析 TypeScript 文件，再进行测试，编辑 .babelrc 文件，添加依赖包 @babel/preset-typescript：</li></ol><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;presets&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;@babel/preset-typescript&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    [</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">      &quot;@babel/preset-env&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;plugins&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;@babel/plugin-transform-runtime&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行 yarn test</p><p>可以看到关于 debounce 防抖工具函数的测试情况显示在了控制台：</p><p>• stmts 是语句覆盖率（statement coverage）：是不是每个语句都执行了？</p><p>• Branch 分支覆盖率（branch coverage）：是不是每个 if 代码块都执行了？</p><p>• Funcs 函数覆盖率（function coverage）：是不是每个函数都调用了？</p><p>• Lines 行覆盖率（line coverage）：是不是每一行都执行了？</p><p>同时还会发现项目根目录多了一个 coverage 文件夹，里面就是 jest 生成的测试报告</p><h3 id="单元测试文件的编写引发的思考" tabindex="-1">单元测试文件的编写引发的思考 <a class="header-anchor" href="#单元测试文件的编写引发的思考" aria-label="Permalink to &quot;单元测试文件的编写引发的思考&quot;">​</a></h3><p>每次修改单元测试都要执行 yarn test 去查看测试结果，怎么解决？</p><p>jest 提供了 watch 指令，只需要配置 scripts 脚本就可以做到，单元测试的热更新。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;scripts&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">    &quot;test&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;jest --watchAll&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以后会写很多工具的测试用例，每次 test 都将所有工具都进行了测试，能否只测试自己写的工具？</p><p>jest 也提供了测试单个文件的方法，这样 jest 只会对防抖函数进行测试（前提全局安装了 jest）</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">jest</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> debounce.test.ts</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --watch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="工具库包的发布" tabindex="-1">工具库包的发布 <a class="header-anchor" href="#工具库包的发布" aria-label="Permalink to &quot;工具库包的发布&quot;">​</a></h2><p>至此工具库距离开发者使用仅一步之遥，就是发布到 npm 上，发包前需要在 package.json 中声明库的一些入口，关键词等信息。</p><div class="language-json5 vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 告知引用该包模块化方式的默认文件路径</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;main&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;lib/main.js&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 告知引用该包模块化方式的文件路径</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;module&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;lib/main.esm.js&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 告知引用该包的类型声明文件路径</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;types&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;lib/types/index.d.ts&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // false 为了告诉 webpack 我这个 npm 包里的所有文件代码都是没有副作用的</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;sideEffects&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;files&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 开发者引用该包后node_modules包里面的文件</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;lib&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;README.md&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;keywords&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;typescript&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;utils-demo&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;utils&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">  &quot;scripts&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;pub&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;npm publish&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><blockquote><p>注意：package.json 中的 sideEffects 字段要写成 false，这样可以方便业务代码打包时 tree-shaking。</p></blockquote><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,84);function g(o,y,B,u,b,F){const i=l,a=p,n=e;return r(),h("div",null,[c,s(i,{readTime:"8",words:"2.2k"}),s(a),s(n)])}const f=t(d,[["render",g]]);export{E as __pageData,f as default};
