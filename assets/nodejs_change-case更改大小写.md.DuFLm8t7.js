import{_ as o,a as r,b as d}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as n,c as i,I as t,a7 as c,o as p}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const x=JSON.parse('{"title":"change-case 更改大小写","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/change-case更改大小写.md","filePath":"nodejs/change-case更改大小写.md","lastUpdated":1713718044000}'),u={name:"nodejs/change-case更改大小写.md"},l=c('<h1 id="change-case-更改大小写" tabindex="-1">change-case 更改大小写 <a class="header-anchor" href="#change-case-更改大小写" aria-label="Permalink to &quot;change-case 更改大小写&quot;">​</a></h1><table tabindex="0"><thead><tr><th>Method</th><th>Result</th></tr></thead><tbody><tr><td>camelCase</td><td>twoWords</td></tr><tr><td>capitalCase</td><td>Two Words</td></tr><tr><td>constantCase</td><td>TWO_WORDS</td></tr><tr><td>dotCase</td><td>two.words</td></tr><tr><td>kebabCase</td><td>two-words</td></tr><tr><td>noCase</td><td>two words</td></tr><tr><td>pascalCase</td><td>TwoWords</td></tr><tr><td>pascalSnakeCase</td><td>Two_Words</td></tr><tr><td>pathCase</td><td>two/words</td></tr><tr><td>sentenceCase</td><td>Two words</td></tr><tr><td>snakeCase</td><td>two_words</td></tr><tr><td>trainCase</td><td>Two-Words</td></tr></tbody></table><p>All methods accept an options object as the second argument: 所有方法都接受一个 options 对象作为第二个参数：</p><p>delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case. delimiter?: string 要在单词之间使用的字符。默认值取决于方法，例如 _ 在蛇的情况下。</p><p>locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable. locale?: string[] | string | false 根据指定的区域设置下/上，默认为主机环境。设置为 false 禁用。</p><p>split?: (value: string) =&gt; string[] A function to define how the input is split into words. Defaults to split. split?: (value: string) =&gt; string[] 一个函数，用于定义如何将输入拆分为单词。默认值为 split 。</p><p>prefixCharacters?: string Retain at the beginning of the string. Defaults to &quot;&quot;. Example: use &quot;<em>&quot; to keep the underscores in __typename. prefixCharacters?: string 保留在字符串的开头。默认值为 &quot;&quot; 。示例：用于 &quot;</em>&quot; 将下划线保留在 __typename 中。</p><p>suffixCharacters?: string Retain at the end of the string. Defaults to &quot;&quot;. Example: use &quot;<em>&quot; to keep the underscore in type</em>. suffixCharacters?: string 保留在字符串的末尾。默认值为 &quot;&quot; 。示例：用于 &quot;<em>&quot; 将下划线保留在 type</em> 中。</p><p>By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true. 默认情况下， pascalCase 用 snakeCase _ 分隔不明确的字符。 例如， V1.2 将变成 V1_2 而不是 V12。 如果您希望将它们合并，可以设置为 mergeAmbiguousCharacters true 。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>',10);function h(_,m,g,f,C,b){const e=o,a=r,s=d;return p(),i("div",null,[l,t(e,{readTime:"1",words:"387"}),t(a),t(s)])}const k=n(u,[["render",h]]);export{x as __pageData,k as default};
