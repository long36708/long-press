import{_ as t,a as l,b as e}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as p,c as r,I as s,a7 as o,o as h}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const k="/long-press/assets/2f32ae88.B82dIDYf.png",b="/long-press/assets/8cdf3baf.5TlYU-Rw.png",v=JSON.parse('{"title":"globby","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/globby.md","filePath":"nodejs/globby.md","lastUpdated":1714222764000}'),d={name:"nodejs/globby.md"},c=o(`<h1 id="globby" tabindex="-1">globby <a class="header-anchor" href="#globby" aria-label="Permalink to &quot;globby&quot;">​</a></h1><p>Based on fast-glob but adds a bunch of useful features. 基于 fast-glob 但添加了一堆有用的功能。</p><p>globby是一个非常实用的Node.js库，它提供了一种简单而灵活的方式来查找文件和目录。</p><p>globby允许您使用通配符模式来匹配文件路径，从而更轻松地查找和处理文件。 globby的API非常简单，易于学习和使用。 您只需要提供一个包含文件和目录路径的数组和一个通配符模式，globby会自动匹配路径并返回匹配的文件和目录列表。<br> 以下是一个使用globby查找文件的示例：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const globby = require(&#39;globby&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(async () =&gt; {</span></span>
<span class="line"><span>  const files = await globby([&#39;./src/**/*.js&#39;, &#39;!./src/vendor/**/*.js&#39;]);</span></span>
<span class="line"><span>  console.log(files);</span></span>
<span class="line"><span>})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在这个例子中，我们使用globby查找所有位于src目录中的JavaScript文件，但不包括位于src/vendor目录中的文件。 我们使用async/await来处理globby的异步调用，将匹配到的文件路径列表打印到控制台上。 globby还提供了许多其他功能，例如过滤文件列表、忽略特定文件、排序文件列表等等。 此外，globby还支持同步和异步调用方式，使得代码更加灵活和易读。 <a href="https://github.com/sindresorhus/globby" target="_blank" rel="noreferrer">https://github.com/sindresorhus/globby</a></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">globby</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;globby&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> paths</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> globby</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;*&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;!cake&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">paths</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// =&gt; [&#39;unicorn&#39;, &#39;rainbow&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Note that glob patterns can only contain forward-slashes, not backward-slashes, so if you want to construct a glob pattern from path components, you need to use path.posix.join() instead of path.join(). 请注意，glob 模式只能包含正斜杠，而不能包含反斜杠， 因此如果要从路径组件构造 glob 模式，则需要使用 path.posix.join() 而不是 path.join() .</p><p><a href="https://npm.devtool.tech/globby" target="_blank" rel="noreferrer">https://npm.devtool.tech/globby</a></p><h2 id="globby-glob-快速批量导入、读取文件的库" tabindex="-1">globby glob 快速批量导入、读取文件的库 <a class="header-anchor" href="#globby-glob-快速批量导入、读取文件的库" aria-label="Permalink to &quot;globby glob 快速批量导入、读取文件的库&quot;">​</a></h2><p>node环境中搜索文件使用的库 globby 是 glob的增强版 后面可以直接使用globby <img src="`+k+'" alt=""><img src="'+b+`" alt=""></p><blockquote><p>User-friendly glob matching Based on fast-glob but adds a bunch of useful features.</p></blockquote><h3 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h3><p>Promise API</p><p>Multiple patterns</p><p>Negated patterns: [&#39;foo*&#39;, &#39;!foobar&#39;]</p><p>Expands directories: <code>foo → foo/**/*</code></p><p>Supports .gitignore and similar ignore config files</p><p>Supports URL as cwd</p><h2 id="fast-glob-快速批量导入、读取文件的库" tabindex="-1">fast-glob 快速批量导入、读取文件的库 <a class="header-anchor" href="#fast-glob-快速批量导入、读取文件的库" aria-label="Permalink to &quot;fast-glob 快速批量导入、读取文件的库&quot;">​</a></h2><p>该包提供了遍历文件系统的方法 <a href="https://github.com/mrmlnc/fast-glob#options-3" target="_blank" rel="noreferrer">https://github.com/mrmlnc/fast-glob#options-3</a></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> glob</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &quot;fast-glob&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> files</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> glob</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;*.ts&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	cwd</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> process</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">cwd</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 需要匹配的工作目录, 默认是process.cwd()</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	absolute</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 返回绝对路径</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	onlyFiles</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 只返回文件</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 返回值 [ &#39;D:/zpp/组件库/multiple-technologies/packages/components-v3/index.ts&#39; ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,23);function g(y,u,m,B,f,F){const a=t,i=l,n=e;return h(),r("div",null,[c,s(a,{readTime:"2",words:"617"}),s(i),s(n)])}const D=p(d,[["render",g]]);export{v as __pageData,D as default};
