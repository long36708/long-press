import{_ as t,a as l,b as p}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as h,c as e,I as s,a7 as k,o as r}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const E=JSON.parse('{"title":"pipcook","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/pipcook.md","filePath":"nodejs/pipcook.md","lastUpdated":1719723968000}'),o={name:"nodejs/pipcook.md"},d=k(`<h1 id="pipcook" tabindex="-1">pipcook <a class="header-anchor" href="#pipcook" aria-label="Permalink to &quot;pipcook&quot;">​</a></h1><h2 id="boa-使用指南" tabindex="-1">Boa 使用指南 <a class="header-anchor" href="#boa-使用指南" aria-label="Permalink to &quot;Boa 使用指南&quot;">​</a></h2><p>Boa 是 Pipcook 中的 Python桥接层，它可以让开发者在 Node.js 中无缝调用 Python 函数，它为 Node.js 开发人员提供了成本更低的学习和使用 Python 的任何模块。</p><p><a href="https://alibaba.github.io/pipcook/#/zh-cn/manual/intro-to-boa" target="_blank" rel="noreferrer">https://alibaba.github.io/pipcook/#/zh-cn/manual/intro-to-boa</a></p><h2 id="使用-ecmascript-modules" tabindex="-1">使用 ECMAScript Modules <a class="header-anchor" href="#使用-ecmascript-modules" aria-label="Permalink to &quot;使用 ECMAScript Modules&quot;">​</a></h2><blockquote><p>要求 Node.js &gt;= v12.11.1</p></blockquote><p>使用 Node.js 自定义加载器提供更好的导入语句：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// app.mjs</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">len</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">range</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;py:builtins&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> os</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;py:os&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">  array</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> NumpyArray</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">  int32</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> NumpyInt32</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;py:numpy&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">os</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">getpid</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// prints the pid from python.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> range</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// create a range array</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">len</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">)); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 10</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> NumpyArray</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">NumpyInt32</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// Create an array of int32 using ndarry constructor</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在 Node.js v14.x 中，你只需要声明 --experimental-loader 即可使用：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">node</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --experimental-loader</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @pipcook/boa/esm/loader.mjs</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> app.mjs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 Node.js 版本小于 v14.x, 你还需要额外增加参数 --experimental-modules，因为 ESM 还在实验阶段：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">node</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --experimental-modules</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --experimental-loader</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @pipcook/boa/esm/loader.mjs</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> app.mjs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,13);function c(y,g,B,m,b,F){const i=t,a=l,n=p;return r(),e("div",null,[d,s(i,{readTime:"1",words:"229"}),s(a),s(n)])}const D=h(o,[["render",c]]);export{E as __pageData,D as default};
