import{_ as o,a as n,b as r}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as p,c,I as e,j as a,a as d,a7 as l,o as x}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const A=JSON.parse('{"title":"React 状态管理（4）：不同方式对比","description":"","frontmatter":{},"headers":[],"relativePath":"react/React实战,设计模式与最佳实践/React 状态管理（4）：不同方式对比.md","filePath":"react/React实战,设计模式与最佳实践/React 状态管理（4）：不同方式对比.md","lastUpdated":1708863350000}'),h={name:"react/React实战,设计模式与最佳实践/React 状态管理（4）：不同方式对比.md"},u=a("h1",{id:"react-状态管理-4-不同方式对比",tabindex:"-1"},[d("React 状态管理（4）：不同方式对比 "),a("a",{class:"header-anchor",href:"#react-状态管理-4-不同方式对比","aria-label":'Permalink to "React 状态管理（4）：不同方式对比"'},"​")],-1),b=l(`<p>现在我们了解了 React 的状态管理，也学习了 Redux 和 Mobx 这两个第三方状态管理工具，是时候来对比一下这几种方式的优缺点了。</p><h2 id="mobx-和-redux-的比较" tabindex="-1">Mobx 和 Redux 的比较 <a class="header-anchor" href="#mobx-和-redux-的比较" aria-label="Permalink to &quot;Mobx 和 Redux 的比较&quot;">​</a></h2><p>Mobx 和 Redux 的目标都是管理好应用状态，但是最根本的区别在于对数据的处理方式不同。</p><p>Redux 认为，数据的一致性很重要，为了保持数据的一致性，要求Store 中的数据尽量范式化，也就是减少一切不必要的冗余，为了限制对数据的修改，要求 Store 中数据是不可改的（Immutable），只能通过 action 触发 reducer 来更新 Store。</p><p>Mobx 也认为数据的一致性很重要，但是它认为解决问题的根本方法不是让数据范式化，而是不要给机会让数据变得不一致。 所以，Mobx 鼓励数据干脆就“反范式化”，有冗余没问题，只要所有数据之间保持联动，改了一处，对应依赖这处的数据自动更新，那就不会发生数据不一致的问题。</p><p>值得一提的是，虽然 Mobx 最初的一个卖点就是直接修改数据，但是实践中大家还是发现这样无组织无纪律不好，所以后来 Mobx 还是提供了action 的概念。</p><p>和 Redux 的 action 有点不同，Mobx 中的 action 其实就是一个函数，不需要做 dispatch，调用就修改对应数据，在上面的代码中，increment 和 decrement 就是 action。</p><p>如果想强制要求使用 action，禁止直接修改 observable 数据，使用 Mobx 的 configure，如下：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">configure</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;mobx&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">configure</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">enforceActions</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>总结一下 Redux 和 Mobx 的区别，包括这些方面：</p><ul><li>Redux 鼓励一个应用只用一个 Store，Mobx 鼓励使用多个 Store；</li><li>Redux 使用“拉”的方式使用数据，这一点和 React是一致的，但 Mobx 使用“推”的方式使用数据，和 RxJS 这样的工具走得更近；</li><li>Redux 鼓励数据范式化，减少冗余，Mobx 容许数据冗余，但同样能保持数据一致。 然后，被问起最多的问题就来了：我应该选用 Mobx 还是 Redux 呢？</li></ul><p>问：你的应用是小而且简单，还是大而且复杂？</p><p>如果是前者，选择 Mobx；如果是后者，选择 Redux。</p><p>问：你想要快速开发应用，还是想要长期维护这个应用？</p><p>如果是前者，选择 Mobx；如果是后者，选择 Redux。</p><h2 id="我们真的必须使用-mobx-和-redux-吗" tabindex="-1">我们真的必须使用 Mobx 和 Redux 吗 <a class="header-anchor" href="#我们真的必须使用-mobx-和-redux-吗" aria-label="Permalink to &quot;我们真的必须使用 Mobx 和 Redux 吗&quot;">​</a></h2><p>当然不是！</p><p>首先我们要明白，Redux 和 Mobx 都是一个特定时期的产物，在 React 没有提供更好的状态管理方法之前，</p><p>Redux 能够帮助使用 React 的开发者一把，Mobx 也能提供一种全新的状态管理理念。</p><p>不过，React 是在持续发展的，光是 Context API 的改进，几乎就可以取代 react-redux 和 mobx-react 的作用。</p><p>实际上，react-redux 和 mobx-react 两者的实现都依赖于 React 的 Context 功能。</p><p>以 Redux 为例，它相较于 React Context 还有哪些特点呢？</p><p>Redux 有更清晰的数据流转过程，配合 Redux Devtools的确方便 Debug，代价就是我们必须要写啰嗦的 action 和 reducer。</p><p>如果我们觉得应用并不需要 Redux 这样的增强功能，那完全就可以直接使用 React 的 Context。</p><p>当然，React 的 Context 还是过于简单了一点，我建议开发者不要只关注 Redux，可以尝试一些更加轻量级的第三方管理工具， 其中的佼佼者，我认为就是 unstated 。</p><p>最后，还是苦口婆心地对开发者们说出这句我曾说过不下一万遍的话：**不要因为某个工具或者技术炫酷或者热门而去用它，要根据自己的工作需要去选择工具和技术 **。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>本小节比较了多种管理 React 状态的方式，读者应该明白：</p><p>Redux 和 Mobx的不同；</p><p>很多场合 React 自身的状态管理就足够用，并不是必须要使用 Redux 或者 Mobx 这样的第三方管理工具；</p><p>随着 React 的发展，开发者对第三方工具的依赖会越来越少。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,32);function _(k,R,m,g,f,B){const t=o,s=n,i=r;return x(),c("div",null,[u,e(t,{readTime:"3",words:"1.1k"}),b,e(s),e(i)])}const F=p(h,[["render",_]]);export{A as __pageData,F as default};
