import{_ as l,a as i,b as r}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as t,c,I as s,j as n,a as o,a7 as b,o as d}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const P=JSON.parse('{"title":"React 组件库搭建指南（二）：开发调试","description":"","frontmatter":{},"headers":[],"relativePath":"react/React组件库搭建指南/02开发调试.md","filePath":"react/React组件库搭建指南/02开发调试.md","lastUpdated":1711988933000}'),u={name:"react/React组件库搭建指南/02开发调试.md"},m=n("h1",{id:"react-组件库搭建指南-二-开发调试",tabindex:"-1"},[o("React 组件库搭建指南（二）：开发调试 "),n("a",{class:"header-anchor",href:"#react-组件库搭建指南-二-开发调试","aria-label":'Permalink to "React 组件库搭建指南（二）：开发调试"'},"​")],-1),h=b(`<p>前言 在上一节完成项目的基本初始化后，本节主要解决开发组件时的预览以及调试问题，顺路解决文档编写。</p><p>此处选择 dumi 作为文档站点工具，并兼具开发调试功能。</p><p>集成 dumi</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> dumi</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> serve</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>增加 npm scripts 至 package.json。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;scripts&quot;: {</span></span>
<span class="line"><span>  &quot;dev&quot;: &quot;dumi dev&quot;, // 启动开发环境 在文档站点中调试组件</span></span>
<span class="line"><span>  &quot;build:site&quot;: &quot;rimraf doc-site &amp;&amp; dumi build&quot;, // 构建文档站点 后续会部署到 github pages</span></span>
<span class="line"><span>  &quot;preview:site&quot;: &quot;npm run build:site &amp;&amp; serve doc-site&quot; // 本地预览构建后的文档站点</span></span>
<span class="line"><span>},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>注意：本节所有操作都是针对站点应用。打包指代文档站点打包，而非组件库。</p></blockquote><p>新建.umirc.ts配置文件，并写入以下内容：</p><p>.umirc.ts</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { defineConfig } from &#39;dumi&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>  title: &#39;Happy UI&#39;, // 站点名称</span></span>
<span class="line"><span>  mode: &#39;site&#39;,</span></span>
<span class="line"><span>  outputPath: &#39;doc-site&#39;, // 输出文件夹</span></span>
<span class="line"><span>  exportStatic: {}, // 后续会部署到 github pages 直接全部生成静态页面 不走前端路由</span></span>
<span class="line"><span>  dynamicImport: {}, // 拆包 站点过大时可以优化首屏加载速度</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="搭建站点骨架" tabindex="-1">搭建站点骨架 <a class="header-anchor" href="#搭建站点骨架" aria-label="Permalink to &quot;搭建站点骨架&quot;">​</a></h2><p>这一步主要是处理不属于组件文档的其他文档，比如站点首页、快速开始、贡献指南以及常用问题等等， 此类文档我们在根目录新建一个 docs 文件夹存放。</p><p>此处以首页为例。</p><p>docs/index.md</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>---</span></span>
<span class="line"><span>title: Happy UI</span></span>
<span class="line"><span>hero:</span></span>
<span class="line"><span>  title: Happy UI</span></span>
<span class="line"><span>  desc: 文档站点基于 dumi 生成</span></span>
<span class="line"><span>  actions:</span></span>
<span class="line"><span>    - text: 快速上手</span></span>
<span class="line"><span>      link: /getting-started</span></span>
<span class="line"><span>features:</span></span>
<span class="line"><span>  - icon: https://gw.alipayobjects.com/zos/bmw-prod/881dc458-f20b-407b-947a-95104b5ec82b/k79dm8ih_w144_h144.png</span></span>
<span class="line"><span>    title: 特性 1</span></span>
<span class="line"><span>    desc: Balabala</span></span>
<span class="line"><span>  - icon: https://gw.alipayobjects.com/zos/bmw-prod/d60657df-0822-4631-9d7c-e7a869c2f21c/k79dmz3q_w126_h126.png</span></span>
<span class="line"><span>    title: 特性 2</span></span>
<span class="line"><span>    desc: Balabala</span></span>
<span class="line"><span>  - icon: https://gw.alipayobjects.com/zos/bmw-prod/d1ee0c6f-5aed-4a45-a507-339a4bfe076c/k7bjsocq_w144_h144.png</span></span>
<span class="line"><span>    title: 特性 3</span></span>
<span class="line"><span>    desc: Balabala</span></span>
<span class="line"><span>footer: Open-source MIT Licensed | Copyright © 2020&lt;br /&gt;Powered by [dumi](https://d.umijs.org)</span></span>
<span class="line"><span>---</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>每一个字段分别对应文档上的一个内容，比较简单，就不过多阐述了，可以参考 dumi 文档进行配置，我在这里配置了“首页”、“快速上手”以及“帮助”三个页面，具体可以去看 master 代码。</p><p>接下来利用 dumi 帮助我们完成组件开发调试。</p><p>调试开发 新建src/alert/demo/basic.tsx，并引入编写好的组件。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import React from &#39;react&#39;;</span></span>
<span class="line"><span>import Alert from &#39;../alert&#39;;</span></span>
<span class="line"><span>import &#39;../style&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default () =&gt; &lt;Alert kind=&quot;warning&quot;&gt;这是一条警告提示&lt;/Alert&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>接下来，我们要让这个 demo 在浏览器里跑起来，目标：修改 Alert 源码时，页面能够及时热刷新，帮助我们调试组件。</p><p>同时在开发不同组件功能时，可以创建不同的 demo，除了用作调试，也是极好的使用文档。</p><p>新建src/alert/index.md，并写入以下内容：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>---</span></span>
<span class="line"><span>title: Alert 警告提示</span></span>
<span class="line"><span>nav:</span></span>
<span class="line"><span>  title: 组件</span></span>
<span class="line"><span>  order: 2</span></span>
<span class="line"><span>group:</span></span>
<span class="line"><span>  title: 反馈</span></span>
<span class="line"><span>  order: 1</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Alert 警告提示</span></span>
<span class="line"><span></span></span>
<span class="line"><span>警告提示，展现需要关注的信息。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 代码演示</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### 基本用法</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;code src=&quot;./demo/basic.tsx&quot;&gt;&lt;/code&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>运行 yarn dev切到组件页面，可以看到以下内容，具体字段意义在截图中标出，比较通俗易懂，比如 order 是用于控制当前元素的顺序。</p><p>可以看到，<code>&lt;code src=&quot;./demo/basic.tsx&quot;&gt;&lt;/code&gt;</code>将我们编写的组件渲染到了 markdown 页面中进，除了这种形式，还可以直接引入组件进行调用（复杂组件不推荐，会提高文档复杂度），也就是说可以直接在 markdown 中无缝使用组件，很方便地达到了调试的目的。</p><blockquote><p>为什么在 markdown 中可以渲染 React 组件？可以去了解 <a href="https://github.com/mdx-js/mdx" target="_blank" rel="noreferrer">mdx</a>。</p></blockquote><h2 id="文档补全" tabindex="-1">文档补全 <a class="header-anchor" href="#文档补全" aria-label="Permalink to &quot;文档补全&quot;">​</a></h2><p>经过前面的操作，我们可以愉快地进行组件开发了，同时调试使用的 demo 也恰巧成为了文档的一部分。</p><p>只需再补充一些组件定义，这篇 markdown 就是我们所需要的最终组件文档。</p><h3 id="手动补全" tabindex="-1">手动补全 <a class="header-anchor" href="#手动补全" aria-label="Permalink to &quot;手动补全&quot;">​</a></h3><p>可以直接通过 markdown 语法手写组件 API。</p><p>src/alert/index.md</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>## API</span></span>
<span class="line"><span></span></span>
<span class="line"><span>| 属性 | 说明     | 类型                                         | 默认值 |</span></span>
<span class="line"><span>| ---- | -------- | -------------------------------------------- | ------ |</span></span>
<span class="line"><span>| kind | 警告类型 | &#39;info&#39;/&#39;positive&#39;/&#39;negative&#39;/&#39;warning&#39;非必填 | &#39;info&#39; |</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这种方式适合对文档要求比较高的同学，控制度较高。</p><h3 id="自动补全" tabindex="-1">自动补全 <a class="header-anchor" href="#自动补全" aria-label="Permalink to &quot;自动补全&quot;">​</a></h3><p>dumi 提供了一种偷懒的方式</p><blockquote><p>该能力基于 react-docgen-typescript</p></blockquote><p>我们在上一章节中编写了 Alert组件的类型定义，现在给定义加上注释。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>export interface AlertProps {</span></span>
<span class="line"><span>  /**</span></span>
<span class="line"><span>   * @description       Alert 的类型</span></span>
<span class="line"><span>   * @default           &#39;info&#39;</span></span>
<span class="line"><span>   */</span></span>
<span class="line"><span>  kind?: &#39;info&#39; | &#39;positive&#39; | &#39;negative&#39; | &#39;warning&#39;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>其中 description 是属性字段的描述，default 是属性字段的默认值，这样一来 dumi 就能根据这些信息生成 API 了，这里需要使用另外一个内置组件 API。</p><p>src/alert/index.md</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;API src=&quot;./index.tsx&quot;&gt;&lt;/API&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用这种方案会在编写组件定义时带来一些限制，如果alias或extends，渲染结果可能无法达到预期，两种方式按需选择即可。</p><h2 id="部署文档站点" tabindex="-1">部署文档站点 <a class="header-anchor" href="#部署文档站点" aria-label="Permalink to &quot;部署文档站点&quot;">​</a></h2><p>其实到上一节本文就差不多结束了，还是顺手把站点部署也一起解决了。</p><p>这里我们直接将文档站点部署到 Github Pages，比较方便（之前使用 vercel 托管的页面，但有些同学可能没有接触过，不太友好）。</p><h3 id="配置路由以及-publicpath" tabindex="-1">配置路由以及 publicPath <a class="header-anchor" href="#配置路由以及-publicpath" aria-label="Permalink to &quot;配置路由以及 publicPath&quot;">​</a></h3><p>托管在 Github Pages，所以应用是挂在 <code>\${username}.github.io/\${repo}</code> 下面，我们站点应用的静态资源路径publicPath以及路由basename都需要进行适配。</p><p>.umirc.ts</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { defineConfig } from &#39;dumi&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>  title: &#39;Happy UI&#39;,</span></span>
<span class="line"><span>  mode: &#39;site&#39;,</span></span>
<span class="line"><span>  outputPath: &#39;doc-site&#39;,</span></span>
<span class="line"><span>  exportStatic: {},</span></span>
<span class="line"><span>  dynamicImport: {},</span></span>
<span class="line"><span>  base: &#39;/react-ui-library-tutorial&#39;, // 此处更换为自己的仓库名</span></span>
<span class="line"><span>  publicPath: &#39;/react-ui-library-tutorial/&#39;, // 此处更换为自己的仓库名</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>但是这样改动后，本地就无法正常预览构建后的站点了（yarn preview:site 里的 serve doc-site是基于根目录预览），这里我们通过环境变量区分一下。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>yarn install cross-env --dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>package.json</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;scripts&quot;: {</span></span>
<span class="line"><span>  &quot;preview:site&quot;: &quot;cross-env SITE_BUILD_ENV=PREVIEW npm run build:site &amp;&amp; serve doc-site&quot;,</span></span>
<span class="line"><span>},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>.umirc.ts</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { defineConfig } from &#39;dumi&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 此处更换为自己的仓库名</span></span>
<span class="line"><span>let base = &#39;/react-ui-library-tutorial&#39;;</span></span>
<span class="line"><span>let publicPath = &#39;/react-ui-library-tutorial/&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (process.env.SITE_BUILD_ENV === &#39;PREVIEW&#39;) {</span></span>
<span class="line"><span>  base = undefined;</span></span>
<span class="line"><span>  publicPath = undefined;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>  title: &#39;Happy UI&#39;,</span></span>
<span class="line"><span>  mode: &#39;site&#39;,</span></span>
<span class="line"><span>  outputPath: &#39;doc-site&#39;,</span></span>
<span class="line"><span>  exportStatic: {},</span></span>
<span class="line"><span>  dynamicImport: {},</span></span>
<span class="line"><span>  base,</span></span>
<span class="line"><span>  publicPath,</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="部署站点应用" tabindex="-1">部署站点应用 <a class="header-anchor" href="#部署站点应用" aria-label="Permalink to &quot;部署站点应用&quot;">​</a></h3><p>通过 gh-pages 一键部署。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>yarn add gh-pages --dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>package.json</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;scripts&quot;: {</span></span>
<span class="line"><span>  &quot;deploy:site&quot;: &quot;npm run build:site &amp;&amp; gh-pages -d doc-site&quot;,</span></span>
<span class="line"><span>},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>执行<code> yarn deploy:site</code> 命令成功后就可以在 <code>\${username}.github.io/\${repo} </code>看到自己的组件库文档站点啦。</p><p>以笔者此项目为例，站点地址为<code>https://worldzhao.github.io/react-ui-library-tutorial</code>。</p><h3 id="使用-github-actions-自动触发部署" tabindex="-1">使用 Github Actions 自动触发部署 <a class="header-anchor" href="#使用-github-actions-自动触发部署" aria-label="Permalink to &quot;使用 Github Actions 自动触发部署&quot;">​</a></h3><p>在项目根目录新建<code>.github/workflows/gh-pages.yml</code>文件，后续 master 触发 push 操作时则会自动触发站点部署，更多配置可自行参阅文档。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>name: github pages</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    branches:</span></span>
<span class="line"><span>      - master # default branch</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  deploy:</span></span>
<span class="line"><span>    runs-on: ubuntu-18.04</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - uses: actions/checkout@v2</span></span>
<span class="line"><span>      - run: yarn</span></span>
<span class="line"><span>      - run: yarn build:site</span></span>
<span class="line"><span>      - name: Deploy</span></span>
<span class="line"><span>        uses: peaceiris/actions-gh-pages@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          github_token: \${{ secrets.GITHUB_TOKEN }}</span></span>
<span class="line"><span>          publish_dir: ./doc-site</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,67);function v(g,k,x,y,f,q){const a=l,p=i,e=r;return d(),c("div",null,[m,s(a,{readTime:"6",words:"1.7k"}),h,s(p),s(e)])}const I=t(u,[["render",v]]);export{P as __pageData,I as default};
