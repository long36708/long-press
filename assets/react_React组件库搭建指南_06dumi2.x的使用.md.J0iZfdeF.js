import{_ as p,a as l,b as i}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as r,c as t,I as s,a7 as c,o as d}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const q=JSON.parse('{"title":"dumi2.x的使用","description":"","frontmatter":{},"headers":[],"relativePath":"react/React组件库搭建指南/06dumi2.x的使用.md","filePath":"react/React组件库搭建指南/06dumi2.x的使用.md","lastUpdated":1712334308000}'),o={name:"react/React组件库搭建指南/06dumi2.x的使用.md"},u=c(`<h1 id="dumi2-x的使用" tabindex="-1">dumi2.x的使用 <a class="header-anchor" href="#dumi2-x的使用" aria-label="Permalink to &quot;dumi2.x的使用&quot;">​</a></h1><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>外部引入 demo必须使用 双标签。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">-&lt;</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">code</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;path/to/demo.tsx&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">code</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;path/to/demo.tsx&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">&gt;&lt;/</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">code</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>已内置全文搜索，默认不再集成 algolia，有需要可以手动覆盖 SearchBar 组件</p><p>dumi 1.x 用 title 作为组件库名称，如果你希望设置的是组件库名称而非页面标题，请改用 name</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>-  title: &#39;xxx&#39;,</span></span>
<span class="line"><span>+  themeConfig: { name: &#39;xxx&#39; },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>resolve 配置项 拆分普通文档解析（多层）和资产文档（单层 + 按分类添加路由前缀）解析，可访问约定式路由了解更多</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>+    docDirs: [&#39;docs&#39;], // 2.0 默认值</span></span>
<span class="line"><span>+    atomDirs: [{ type: &#39;component&#39;, dir: &#39;src&#39; }], // 2.0 默认值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>默认使用 webpack 5</p><div class="tip custom-block"><p class="custom-block-title">Monorepo 模式下特别注意 🚨：</p><p>由于 dumi 2 不再感知 monorepo ，因此会出现热更新失效的问题，需要手动配置包名到 src 的 alias。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>alias: {</span></span>
<span class="line"><span>  pkg: path.join(__dirname, &#39;packages/pkg/src&#39;);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><h2 id="目录结构升级" tabindex="-1">目录结构升级 <a class="header-anchor" href="#目录结构升级" aria-label="Permalink to &quot;目录结构升级&quot;">​</a></h2><p>由于 dumi 2.0 拆分了普通文档与资产文档的解析逻辑，其中资产文档的解析仅识别解析路径顶层 md 及顶层下的 index.md， 所以在 src 下的文档目录结构可能需要做调整，例如：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    ├── Foo</span></span>
<span class="line"><span>    │   ├── index.md     # ✅ 识别</span></span>
<span class="line"><span>    │   └── a.md         # ❗️ 非 index.md 不再识别</span></span>
<span class="line"><span>    ├── components</span></span>
<span class="line"><span>    │   └── Bar</span></span>
<span class="line"><span>    │       └── index.md # ❗️ 嵌套层级不再识别</span></span>
<span class="line"><span>    └── Hello.md         # ✅ 识别</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果不方便调整结构，可以通过配置 resolve.atomDirs 来指定识别的目录，例如：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>export default {</span></span>
<span class="line"><span>  resolve: {</span></span>
<span class="line"><span>    atomDirs: [</span></span>
<span class="line"><span>      { type: &#39;component&#39;, dir: &#39;src&#39; }, // 默认值</span></span>
<span class="line"><span>      # 追加一个组件资产的解析目录</span></span>
<span class="line"><span>+     { type: &#39;component&#39;, dir: &#39;src/components&#39; },</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Monorepo 模式下</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>export default {</span></span>
<span class="line"><span>  resolve: {</span></span>
<span class="line"><span>    atomDirs: [</span></span>
<span class="line"><span>      { type: &#39;component&#39;, dir: &#39;src&#39; }, // 默认值</span></span>
<span class="line"><span>      # 做顶级路由的区分，被解析到的 md 均有对应 \`type\` 复数形式的路由前缀，例如 \`/basic-components/foo\`</span></span>
<span class="line"><span>+     { type: &#39;basic-component&#39;, dir: &#39;packages/basic/src&#39; },</span></span>
<span class="line"><span>+     { type: &#39;complex-component&#39;, dir: &#39;packages/complex/src&#39; },</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="如何完全自定义首页" tabindex="-1">如何完全自定义首页？ <a class="header-anchor" href="#如何完全自定义首页" aria-label="Permalink to &quot;如何完全自定义首页？&quot;">​</a></h3><p>创建 .dumi/pages/index.tsx 即可用 React 来编写首页，注意不要同时在文档解析的根目录中创建 index.md，会导致路由冲突。</p><h3 id="如何在-cra-等非-umi-项目中使用-dumi" tabindex="-1">如何在 cra 等非 umi 项目中使用 dumi？ <a class="header-anchor" href="#如何在-cra-等非-umi-项目中使用-dumi" aria-label="Permalink to &quot;如何在 cra 等非 umi 项目中使用 dumi？&quot;">​</a></h3><p>安装模块。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>yarn add dumi cross-env -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>增加启动命令，修改 package.json。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>    &quot;dumi&quot;: &quot;cross-env APP_ROOT=dumi dumi dev&quot;,</span></span>
<span class="line"><span>    &quot;dumi-build&quot;: &quot;cross-env APP_ROOT=dumi dumi build&quot;</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>增加配置，新建 .dumirc.js|ts 到 APP_ROOT 指定的根目录中。dumi 会根据 APP_ROOT 来消费配置文件，如果不指定 APP_ROOT，则在项目根目录创建即可。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>export default {</span></span>
<span class="line"><span>  chainWebpack(memo) {</span></span>
<span class="line"><span>    memo.plugins.delete(&#39;copy&#39;);</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>新建文档目录 dumi/docs/，这里的 dumi 目录即第二步中配置的环境变量，你可以随意同步修改。</p><p>新建文档 dumi/docs/index.md。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># 这是一个 dumi 结合 create-react-app 的 Demo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 dumi 的临时文件添加到 .gitignore 中。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>.dumi/tmp*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="如何添加统计脚本和全局-css-样式" tabindex="-1">如何添加统计脚本和全局 CSS 样式？ <a class="header-anchor" href="#如何添加统计脚本和全局-css-样式" aria-label="Permalink to &quot;如何添加统计脚本和全局 CSS 样式？&quot;">​</a></h3><p>统计脚本可以使用配置项 analytics，全局样式可以添加到 .dumi/global.{less,css} 文件内。</p><h3 id="部署到-github-pages" tabindex="-1">部署到 GitHub Pages <a class="header-anchor" href="#部署到-github-pages" aria-label="Permalink to &quot;部署到 GitHub Pages&quot;">​</a></h3><p>由于 GitHub Pages 是非域名根路径部署, base 和 publicPath 配置项需改为 仓库名称 。参考 非根目录部署</p><p>手动部署 借助 gh-pages 可以轻松帮助我们部署文档到 Github Page</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm install gh-pages --save-dev</span></span>
<span class="line"><span># or</span></span>
<span class="line"><span>yarn add gh-pages -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>package.json 中添加</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;scripts&quot;: {</span></span>
<span class="line"><span>  &quot;deploy&quot;: &quot;gh-pages -d dist&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>同样的，如果是 react 文档，使用 gh-pages -d docs-dist命令即可。</p></blockquote><p>编译生成 dist 目录</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># site 模版</span></span>
<span class="line"><span>npm run build</span></span>
<span class="line"><span></span></span>
<span class="line"><span># react 模版</span></span>
<span class="line"><span>npm run docs:build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>一键发布</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm run deploy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>自动部署 利用 Github Action 在每次 main 分支更新后自动部署</p><p>新建 .github/workflows/gh-pages.yml 文件</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>name: github pages</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    branches:</span></span>
<span class="line"><span>      - main # default branch</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  deploy:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - name: Checkout</span></span>
<span class="line"><span>        uses: actions/checkout@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          # 如果配置 themeConfig.lastUpdated 为 false，则不需要添加该参数以加快检出速度</span></span>
<span class="line"><span>          fetch-depth: 0</span></span>
<span class="line"><span>      - name: Install dependencies</span></span>
<span class="line"><span>        run: npm install</span></span>
<span class="line"><span>      - name: Build with dumi</span></span>
<span class="line"><span>        # 文档编译命令，如果是 react 模板需要修改为 npm run docs:build</span></span>
<span class="line"><span>        run: npm run build</span></span>
<span class="line"><span>      - name: Deploy</span></span>
<span class="line"><span>        uses: peaceiris/actions-gh-pages@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          github_token: \${{ secrets.GITHUB_TOKEN }}</span></span>
<span class="line"><span>          # 文档目录，如果是 react 模板需要修改为 docs-dist</span></span>
<span class="line"><span>          publish_dir: ./dist</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="为什么不支持-css-modules" tabindex="-1">为什么不支持 CSS Modules？ <a class="header-anchor" href="#为什么不支持-css-modules" aria-label="Permalink to &quot;为什么不支持 CSS Modules？&quot;">​</a></h3><p>主要两个原因：</p><ol><li>使用者很难覆写样式，因为最终 className 不稳定</li><li>自动 CSS Modules 依赖 babel 编译产物，给使用项目带来额外的编译成本，而大部分框架默认都不编译 node_modules（比如 Umi 框架就需要配置 extraBabelIncludes 才会编译 node_modules 下的产物）</li></ol><p>也许大部分人选择在组件库项目中使用它，是因为做前端应用研发时的习惯性选型，但它其实不适合组件库项目；另外，原因 2 也会产生额外的调时成本：『为什么 dev 生效、发布后在项目里不生效？』</p><h3 id="为什么组件库发布以后-在项目中引入组件但样式不生效" tabindex="-1">为什么组件库发布以后，在项目中引入组件但样式不生效？ <a class="header-anchor" href="#为什么组件库发布以后-在项目中引入组件但样式不生效" aria-label="Permalink to &quot;为什么组件库发布以后，在项目中引入组件但样式不生效？&quot;">​</a></h3><blockquote><p>这里仅讨论非 CSS-in-JS 的组件库，CSS-in-JS 的组件库如果存在此问题，应该和组件实现有关。</p></blockquote><p>遇到这个问题说明组件库文档中引入的组件是有样式的，需要先确认文档中样式生效的原因，通常有 3 种可能：</p><ol><li>借助 .dumi/global.less 加载了组件库样式表</li><li>借助 .dumirc.ts 中的 styles 配置项加载了组件库样式表</li><li>借助 babel-plugin-import 并将其配置到 .dumirc.ts 中按需加载了组件样式</li></ol><p>实际上，这些样式引入方案均只对文档构建生效，也就是说它们都是依托于 dumi 框架提供的能力，而组件库发布为 NPM 包以后，组件库的编译将由实际使用组件库的项目负责。</p><p>因此，我们需要根据项目使用的开发框架做等价配置，才能确保样式生效，此处以 Umi 项目为例，上述 3 种方案的等价配置方式如下：</p><ol><li>借助 src/global.less 加载组件库样式表</li><li>借助 .umirc.ts 中的 styles 配置项加载组件库样式表</li><li>借助 babel-plugin-import 并将其配置到 .umirc.ts 中按需加载组件样式</li></ol><p>其实该问题还有一种解决思路，那就是直接在组件源码里引入样式表，类似：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import &#39;./index.less&#39;;</span></span>
<span class="line"><span>// or</span></span>
<span class="line"><span>import &#39;./index.css&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 组件其他源码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样无论是 dumi 还是实际项目里，都不需要做额外配置，但这种做法也有一些限制： <strong>如果引入的是 .less，那么目标项目的开发框架必须支持编译Less。</strong></p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,64);function b(m,h,v,g,k,x){const a=p,n=l,e=i;return d(),t("div",null,[u,s(a,{readTime:"5",words:"1.6k"}),s(n),s(e)])}const f=r(o,[["render",b]]);export{q as __pageData,f as default};
