import{_ as t,a as i,b as p}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as l,c as r,I as s,a7 as o,o as c}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const F=JSON.parse('{"title":"zustand官网翻译","description":"","frontmatter":{},"headers":[],"relativePath":"react/状态管理/zustand翻译文档.md","filePath":"react/状态管理/zustand翻译文档.md","lastUpdated":1711301918000}'),h={name:"react/状态管理/zustand翻译文档.md"},d=o(`<h1 id="zustand官网翻译" tabindex="-1">zustand官网翻译 <a class="header-anchor" href="#zustand官网翻译" aria-label="Permalink to &quot;zustand官网翻译&quot;">​</a></h1><p>一个小型、快速、可扩展的状态管理解决方案，基于简化的 flux 原则。它有一个友好的基于 hook 的 api，而不是那种样板式的或者固执己见的。</p><p>不要因为它的可爱而忽视了它。它有相当多的爪子，花了很多时间来处理常见的陷阱，比如可怕的<a href="https://react-redux.js.org/api/hooks#stale-props-and-zombie-children" target="_blank" rel="noreferrer">zombie child 问题</a>、<a href="https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md" target="_blank" rel="noreferrer">react concurrency</a> ，以及混合渲染器之间的<a href="https://github.com/facebook/react/issues/13332" target="_blank" rel="noreferrer">上下文丢失</a>。它可能是 React 领域中唯一一个能解决所有这些问题的状态管理库。</p><p>你可以试一下这个<a href="https://githubbox.com/pmndrs/zustand/tree/main/examples" target="_blank" rel="noreferrer">在线 demo</a>。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> zustand</span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # or yarn add zustand</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="首先创建一个-store" tabindex="-1">首先创建一个 store <a class="header-anchor" href="#首先创建一个-store" aria-label="Permalink to &quot;首先创建一个 store&quot;">​</a></h2><p>你的 store 是一个 hook！你可以在里面放任何东西：基本类型值、对象、函数。而<code>set</code>函数会_合并_状态。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create from &quot;zustand&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const useStore = create((set) =&gt; ({</span></span>
<span class="line"><span>	bears: 0,</span></span>
<span class="line"><span>	increasePopulation: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })),</span></span>
<span class="line"><span>	removeAllBears: () =&gt; set({ bears: 0 }),</span></span>
<span class="line"><span>}));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="然后绑定你的组件-就是这么简单" tabindex="-1">然后绑定你的组件，就是这么简单! <a class="header-anchor" href="#然后绑定你的组件-就是这么简单" aria-label="Permalink to &quot;然后绑定你的组件，就是这么简单!&quot;">​</a></h2><p>在任何地方使用这个 hook，不需要 provider。组件会在你选择的状态变化时重新渲染。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>function BearCounter() {</span></span>
<span class="line"><span>	const bears = useStore((state) =&gt; state.bears);</span></span>
<span class="line"><span>	return &lt;h1&gt;{bears} around here ...&lt;/h1&gt;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function Controls() {</span></span>
<span class="line"><span>	const increasePopulation = useStore((state) =&gt; state.increasePopulation);</span></span>
<span class="line"><span>	return &lt;button onClick={increasePopulation}&gt;one up&lt;/button&gt;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="为什么是-zustand-而不是-redux" tabindex="-1">为什么是 zustand 而不是 redux？ <a class="header-anchor" href="#为什么是-zustand-而不是-redux" aria-label="Permalink to &quot;为什么是 zustand 而不是 redux？&quot;">​</a></h3><ul><li>简单而不固执己见</li><li>使得 hook 成为消费状态的主要手段</li><li>不需要把你的 app 包裹在 context provider 中</li><li>可以为组件提供瞬时状态(不引起渲染)</li></ul><h3 id="为什么是-zustand-而不是-context" tabindex="-1">为什么是 zustand 而不是 context? <a class="header-anchor" href="#为什么是-zustand-而不是-context" aria-label="Permalink to &quot;为什么是 zustand 而不是 context?&quot;">​</a></h3><ul><li>更少的样板代码</li><li>只在状态变化时渲染组件</li><li>集中的、基于 action 的状态管理</li></ul><hr><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><h2 id="获取所有状态" tabindex="-1">获取所有状态 <a class="header-anchor" href="#获取所有状态" aria-label="Permalink to &quot;获取所有状态&quot;">​</a></h2><p>你可以这么做，但请记住，这将导致该组件在每一个状态变化时都要进行更新</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const state = useStore();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="选择多个状态切片" tabindex="-1">选择多个状态切片 <a class="header-anchor" href="#选择多个状态切片" aria-label="Permalink to &quot;选择多个状态切片&quot;">​</a></h2><p>默认情况下，它基于严格相等来检测变化(old === new)，这对原子状态的选择是有效的。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const nuts = useStore((state) =&gt; state.nuts);</span></span>
<span class="line"><span>const honey = useStore((state) =&gt; state.honey);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果你想构造一个内部有多个状态的对象，类似于 redux 的 mapStateToProps，你可以通过传递<code>shallow</code>比较函数来告诉 zustand 你想让这个对象被浅层 diff。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import shallow from &quot;zustand/shallow&quot;; // 对象选取，当state.nuts或state.honey改变时，重新渲染组件。 const { nuts, honey } = useStore( (state) =&gt; ({ nuts: state.nuts, honey: state.honey }), shallow ); // 数组选取，当state.nuts或state.honey改变时，重新渲染组件。 const [nuts, honey] = useStore((state) =&gt; [state.nuts, state.honey], shallow); // 映射选取，当state.treats在顺序、数量或对象键上发生变化时，重新渲染组件 const treats = useStore((state) =&gt; Object.keys(state.treats), shallow);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>为了对重新渲染进行更多控制，你可以提供自定义的比较函数。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const treats = useStore((state) =&gt; state.treats, (oldTreats, newTreats) =&gt; compare(oldTreats, newTreats));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="记忆化选择器" tabindex="-1">记忆化选择器 <a class="header-anchor" href="#记忆化选择器" aria-label="Permalink to &quot;记忆化选择器&quot;">​</a></h2><p>通常建议用 useCallback 来记忆选择器。这将避免在每次渲染时进行不必要的计算。它也允许 React 在 concurrent 模式下优化性能。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const fruit = useStore(useCallback((state) =&gt; state.fruits[id], [id]));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果一个选择器不依赖于作用域，你可以在渲染函数(组件)之外定义它，以获得一个固定的引用，而无需使用 useCallback。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const selector = state =&gt; state.berries</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function Component() {</span></span>
<span class="line"><span>	const berries = useStore(selector)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="覆盖状态" tabindex="-1">覆盖状态 <a class="header-anchor" href="#覆盖状态" aria-label="Permalink to &quot;覆盖状态&quot;">​</a></h2><p><code>set</code>函数有第二个参数，默认为<code>false</code>。它将替换状态而不是合并它们。注意不要覆盖了你依赖的部分，比如 action。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import omit from &quot;lodash-es/omit&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const useStore = create((set) =&gt; ({ salmon: 1, tuna: 2, deleteEverything: () =&gt; set({}, true), // 清楚整个store，包括action deleteTuna: () =&gt; set((state) =&gt; omit(state, [&quot;tuna&quot;]), true), }));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="异步-action" tabindex="-1">异步 action <a class="header-anchor" href="#异步-action" aria-label="Permalink to &quot;异步 action&quot;">​</a></h2><p>当你准备好时，只需调用<code>set</code>，zustand 并不关心你的 action 是否是异步的。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const useStore = create((set) =&gt; ({</span></span>
<span class="line"><span>	fishies: {}, fetch: async (pond) =&gt; {</span></span>
<span class="line"><span>		const response = await fetch(pond);</span></span>
<span class="line"><span>		set({ fishies: await response.json() });</span></span>
<span class="line"><span>	},</span></span>
<span class="line"><span>}));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="从-action-中读取状态" tabindex="-1">从 action 中读取状态 <a class="header-anchor" href="#从-action-中读取状态" aria-label="Permalink to &quot;从 action 中读取状态&quot;">​</a></h2><p><code>set</code>允许函数式更新:<code>set(state =&gt; result)</code>，但你仍然可以通过<code>get</code>访问它之外的状态。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const useStore = create((set, get) =&gt; ({</span></span>
<span class="line"><span>	sound: &quot;grunt&quot;, action: () =&gt; {</span></span>
<span class="line"><span>		const sound = get().sound // ... </span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="读取-写入状态并对组件外的变化做出响应" tabindex="-1">读取/写入状态并对组件外的变化做出响应 <a class="header-anchor" href="#读取-写入状态并对组件外的变化做出响应" aria-label="Permalink to &quot;读取/写入状态并对组件外的变化做出响应&quot;">​</a></h2><p>有时你需要以非响应式的方式访问状态，或者对 store 进行操作。对于这些情况，返回的 hook 在其原型上附加了一些实用函数。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const useStore = create(() =&gt; ({ paw: true, snout: true, fur: true })) // 获得最新的且非响应式的状态 const paw = useStore.getState().paw // 监听所有的变化，每次变化是将同步触发 const unsub1 = useStore.subscribe(console.log) // 更新状态，将触发监听器 useStore.setState({ paw: false }) // 取消订阅 unsub1() // 销毁store(删除所有订阅)。 useStore.destroy() // 当然，你可以像往常一样使用hook function Component() { const paw = useStore(state =&gt; state.paw)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用带选择器的订阅者" tabindex="-1">使用带选择器的订阅者 <a class="header-anchor" href="#使用带选择器的订阅者" aria-label="Permalink to &quot;使用带选择器的订阅者&quot;">​</a></h3><p>如果你需要带选择器的订阅者，<code>subscribeWithSelector</code>中间件会有帮助。</p><p>通过这个中间件，<code>subscribe</code>接受一个额外参数。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// subscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe import { subscribeWithSelector } from &quot;zustand/middleware&quot;; const useStore = create( subscribeWithSelector(() =&gt; ({ paw: true, snout: true, fur: true })) ); // 监听选定的状态变化，在这个例子中是 &quot;paw&quot; const unsub2 = useStore.subscribe((state) =&gt; state.paw, console.log); // subscribe也会变化前的值 const unsub3 = useStore.subscribe( (state) =&gt; state.paw, (paw, previousPaw) =&gt; console.log(paw, previousPaw) ); // subscribe还支持一个可选的比较函数 const unsub4 = useStore.subscribe( (state) =&gt; [state.paw, state.fur], console.log, { equalityFn: shallow } ); // 订阅并立即触发 const unsub5 = useStore.subscribe((state) =&gt; state.paw, console.log, { fireImmediately: true, });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="如何在-ts-中让subscribewithselector带有类型" tabindex="-1">如何在 TS 中让<code>subscribeWithSelector</code>带有类型 <a class="header-anchor" href="#如何在-ts-中让subscribewithselector带有类型" aria-label="Permalink to &quot;如何在 TS 中让\`subscribeWithSelector\`带有类型&quot;">​</a></h3><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create, { GetState, SetState } from &quot;zustand&quot;;</span></span>
<span class="line"><span>import { StoreApiWithSubscribeWithSelector, subscribeWithSelector, } from &quot;zustand/middleware&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type</span></span>
<span class="line"><span>BearState = { paw: boolean; snout: boolean; fur: boolean; };</span></span>
<span class="line"><span>const useStore = create &lt; BearState, SetState</span></span>
<span class="line"><span>&lt;</span></span>
<span class="line"><span>BearState &gt;, GetState &lt; BearState &gt;, StoreApiWithSubscribeWithSelector &lt; BearState &gt; &gt; (subscribeWithSelector(() =&gt; ({</span></span>
<span class="line"><span>	paw: true,</span></span>
<span class="line"><span>	snout: true,</span></span>
<span class="line"><span>	fur: true</span></span>
<span class="line"><span>})));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>对于有多个中间件的更复杂的类型请参考<a href="https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx" target="_blank" rel="noreferrer">middlewareTypes.test.tsx</a>。</p><h2 id="在没有-react-的情况下使用-zustand" tabindex="-1">在没有 React 的情况下使用 zustand <a class="header-anchor" href="#在没有-react-的情况下使用-zustand" aria-label="Permalink to &quot;在没有 React 的情况下使用 zustand&quot;">​</a></h2><p>Zustands 的核心可以在不依赖 React 的情况下被导入和使用。唯一的区别是，创建函数不返回 hook，而是返回一系列 api 函数。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create from &#39;zustand/vanilla&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const store = create(() =&gt; ({ ... }))</span></span>
<span class="line"><span>const { getState, setState, subscribe, destroy } = store</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>你甚至可以用 React 消费现有的 vanilla store。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create from &quot;zustand&quot;;</span></span>
<span class="line"><span>import vanillaStore from &quot;./vanillaStore&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const useStore = create(vanillaStore);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意修改<code>set</code>或<code>get</code>的中间件不应用于<code>getState</code>和<code>setState</code>。</p><h2 id="瞬时更新-对于经常发生的状态变化-。" tabindex="-1">瞬时更新(对于经常发生的状态变化)。 <a class="header-anchor" href="#瞬时更新-对于经常发生的状态变化-。" aria-label="Permalink to &quot;瞬时更新(对于经常发生的状态变化)。&quot;">​</a></h2><p>subscribe 函数允许组件绑定到状态端，而不需要在变化时强制重新渲染。最好把它和 useEffect 结合起来，以便在卸载时自动取消订阅。当你允许它直接改变视图时，这可能会对性能产生<a href="https://codesandbox.io/s/peaceful-johnson-txtws" target="_blank" rel="noreferrer">剧烈</a> 的影响。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const useStore = create(set =&gt; ({ scratches: 0, ... }))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function Component() { // 获取初始状态 const scratchRef = useRef(useStore.getState().scratches) // 挂载时连接到store，卸载时断开连接，在ref中捕捉状态变化 useEffect(() =&gt; useStore.subscribe( state =&gt; (scratchRef.current = state.scratches) ), [])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="厌倦了-reducers-和变更嵌套状态-使用-immer" tabindex="-1">厌倦了 reducers 和变更嵌套状态？使用 Immer! <a class="header-anchor" href="#厌倦了-reducers-和变更嵌套状态-使用-immer" aria-label="Permalink to &quot;厌倦了 reducers 和变更嵌套状态？使用 Immer!&quot;">​</a></h2><p>Reducing 一个嵌套结构是很累人的。你试过<a href="https://github.com/mweststrate/immer" target="_blank" rel="noreferrer">immer</a>吗？</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import produce from &quot;immer&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const useStore = create((set) =&gt; ({</span></span>
<span class="line"><span>	lush: { forest: { contains: { a: &quot;bear&quot; } } },</span></span>
<span class="line"><span>	clearForest: () =&gt; set(produce((state) =&gt; {</span></span>
<span class="line"><span>		state.lush.forest.contains = null;</span></span>
<span class="line"><span>	})),</span></span>
<span class="line"><span>}));</span></span>
<span class="line"><span>const clearForest = useStore((state) =&gt; state.clearForest);</span></span>
<span class="line"><span>clearForest();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="中间件" tabindex="-1">中间件 <a class="header-anchor" href="#中间件" aria-label="Permalink to &quot;中间件&quot;">​</a></h2><p>你可以函数式地以任何你喜欢的方式组合你的 store。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// 每次状态变化时打印输出 const log = (config) =&gt; (set, get, api) =&gt; config( (args) =&gt; { console.log(&quot; applying&quot;, args); set(args); console.log(&quot; new state&quot;, get()); }, get, api ); // 对set方法使用immer代理 const immer = (config) =&gt; (set, get, api) =&gt; config( (partial, replace) =&gt; { const nextState = typeof partial === &quot;function&quot; ? produce(partial) : partial; return set(nextState, replace); }, get, api ); const useStore = create( log( immer((set) =&gt; ({ bees: false, setBees: (input) =&gt; set((state) =&gt; (state.bees = input)), })) ) );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用-pipe-连接中间件" tabindex="-1">使用 pipe 连接中间件 <a class="header-anchor" href="#使用-pipe-连接中间件" aria-label="Permalink to &quot;使用 pipe 连接中间件&quot;">​</a></h3><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create from &quot;zustand&quot;;</span></span>
<span class="line"><span>import produce from &quot;immer&quot;;</span></span>
<span class="line"><span>import pipe from &quot;ramda/es/pipe&quot;; /* 前面例子中的log和immer函数 */ /* 你可以随意连接多个中间件 */</span></span>
<span class="line"><span>const createStore = pipe(log, immer, create);</span></span>
<span class="line"><span>const useStore = createStore((set) =&gt; ({</span></span>
<span class="line"><span>	bears: 1,</span></span>
<span class="line"><span>	increasePopulation: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })),</span></span>
<span class="line"><span>}));</span></span>
<span class="line"><span>export default useStore;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>关于 TS 的例子，请看这个<a href="https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208" target="_blank" rel="noreferrer">讨论</a></p><blockquote><p>如何在 TS 中让 immer 中间件带有类型</p></blockquote><p>在<a href="https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx" target="_blank" rel="noreferrer">middlewareTypes.test.tsx</a>中有一个实现和一些用例。</p><h2 id="持久化中间件" tabindex="-1">持久化中间件 <a class="header-anchor" href="#持久化中间件" aria-label="Permalink to &quot;持久化中间件&quot;">​</a></h2><p>你可以使用任何一种存储来持久化你 store 里的数据。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create from &quot;zustand&quot;;</span></span>
<span class="line"><span>import { persist } from &quot;zustand/middleware&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export const useStore = create(persist((set, get) =&gt; ({</span></span>
<span class="line"><span>	fishes: 0,</span></span>
<span class="line"><span>	addAFish: () =&gt; set({ fishes: get().fishes + 1 }),</span></span>
<span class="line"><span>}), { name: &quot;food-storage&quot;, // 唯一键 getStorage: () =&gt; sessionStorage, // (可选)默认使用&#39;localStorage&#39; } ) );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="https://github.com/pmndrs/zustand/wiki/Persisting-the-store&#39;s-data" target="_blank" rel="noreferrer">该中间件的完整文档</a></p><h2 id="离不开类似-redux-的-reducers-和-action-types" tabindex="-1">离不开类似 redux 的 reducers 和 action types？ <a class="header-anchor" href="#离不开类似-redux-的-reducers-和-action-types" aria-label="Permalink to &quot;离不开类似 redux 的 reducers 和 action types？&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const types = { increase: &quot;INCREASE&quot;, decrease: &quot;DECREASE&quot; };</span></span>
<span class="line"><span>const reducer = (state, { type, by = 1 }) =&gt; {</span></span>
<span class="line"><span>	switch (type) {</span></span>
<span class="line"><span>		case types.increase:</span></span>
<span class="line"><span>			return { grumpiness: state.grumpiness + by };</span></span>
<span class="line"><span>		case types.decrease:</span></span>
<span class="line"><span>			return { grumpiness: state.grumpiness - by };</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>const useStore = create((set) =&gt; ({ grumpiness: 0, dispatch: (args) =&gt; set((state) =&gt; reducer(state, args)), }));</span></span>
<span class="line"><span>const dispatch = useStore((state) =&gt; state.dispatch);</span></span>
<span class="line"><span>dispatch({ type: types.increase, by: 2 });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>或者使用我们的 redux 中间件。它连接你的主 reducer，设置初始状态，并为状态本身和 vanilla api 添加一个调度函数。试试<a href="https://codesandbox.io/s/amazing-kepler-swxol" target="_blank" rel="noreferrer">这个</a>例子。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { redux } from &quot;zustand/middleware&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const useStore = create(redux(reducer, initialState));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="在-react-event-handler-之外调用-action" tabindex="-1">在 React event handler 之外调用 action <a class="header-anchor" href="#在-react-event-handler-之外调用-action" aria-label="Permalink to &quot;在 React event handler 之外调用 action&quot;">​</a></h2><p>因为如果在外部调用 event handler，React 会同步地<code>setState</code>。在 event handler 之外更新状态将迫使 React 同步更新组件，因此增加了遇到 zombie-child 效应的风险。 为了解决这个问题，这个 action 需要用<code>unstable_batchedUpdates</code>来包装。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { unstable_batchedUpdates } from &quot;react-dom&quot;; // or &#39;react-native&#39; const useStore = create((set) =&gt; ({ fishes: 0, increaseFishes: () =&gt; set((prev) =&gt; ({ fishes: prev.fishes + 1 })), })); const nonReactCallback = () =&gt; { unstable_batchedUpdates(() =&gt; { useStore.getState().increaseFishes(); }); };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>更多细节见: <a href="https://github.com/pmndrs/zustand/issues/302" target="_blank" rel="noreferrer">https://github.com/pmndrs/zustand/issues/302</a></p><h2 id="redux-devtools" tabindex="-1">Redux devtools <a class="header-anchor" href="#redux-devtools" aria-label="Permalink to &quot;Redux devtools&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { devtools } from &quot;zustand/middleware&quot;; // 使用普通store，它将将action打印为&quot;setState&quot; const useStore = create(devtools(store)); // 与redux store一起使用，它将打印完整的action types const useStore = create(devtools(redux(reducer, initialState)));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>devtools 把 store 函数作为它的第一个参数，你可以选择给 store 命名或用第二个参数配置<a href="https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize" target="_blank" rel="noreferrer">serialize</a> 选项。</p><p>命名 store: <code>devtools(store, {name: &quot;MyStore&quot;})</code>，这将在 devtools 中创建一个单独的名为 &quot;MyStore&quot; 的实例。</p><p>Serialize 选项: <code>devtools(store, { serialize: { options: true } })</code>。</p><h3 id="打印-action" tabindex="-1">打印 action <a class="header-anchor" href="#打印-action" aria-label="Permalink to &quot;打印 action&quot;">​</a></h3><p>devtools 只打印每个分离的存储空间的操作，与典型的_组合 reducers_ redux store 不同。参见组合 store 的方法<a href="https://github.com/pmndrs/zustand/issues/163" target="_blank" rel="noreferrer">https://github.com/pmndrs/zustand/issues/163</a></p><p>你可以通过传递第三个参数来打印每个<code>set</code>函数的特定 action 类型。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const createBearSlice = (set, get) =&gt; ({ eatFish: () =&gt; set((prev) =&gt; ({ fishes: prev.fishes &gt; 1 ? prev.fishes - 1 : 0 }), false, &quot;bear/eatFish&quot;), });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果没有提供 action 类型，它将被默认为 &quot;unknown&quot;。你可以通过提供一个<code>anonymousActionType</code>参数来定制这个默认值。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>devtools(..., { anonymousActionType: &#39;unknown&#39;, ... })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="react-context" tabindex="-1">React context <a class="header-anchor" href="#react-context" aria-label="Permalink to &quot;React context&quot;">​</a></h2><p>用<code>create</code>创建的 store 不需要 context providers。在某些情况下，你可能想使用 context 来进行依赖注入，或者如果你想用组件的 props 来初始化你的 store。因为 store 是一个 hook，把它作为一个普通的 context 值传递可能会违反 hook 的规则。为了避免误用，我们提供了一个特殊的<code>createContext</code>。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create from &#39;zustand&#39;</span></span>
<span class="line"><span>import createContext from &#39;zustand/context&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const { Provider, useStore } = createContext()</span></span>
<span class="line"><span>const createStore = () =&gt; create(...)</span></span>
<span class="line"><span>const App = () =&gt; (&lt;Provider createStore={createStore}&gt;...&lt;/Provider&gt;)</span></span>
<span class="line"><span>const Component = () =&gt; {</span></span>
<span class="line"><span>	const state = useStore()</span></span>
<span class="line"><span>	const slice = useStore(selector)</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="createcontext-在实际组件中的应用" tabindex="-1">createContext 在实际组件中的应用 <a class="header-anchor" href="#createcontext-在实际组件中的应用" aria-label="Permalink to &quot;createContext 在实际组件中的应用&quot;">​</a></h3><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create from &quot;zustand&quot;;</span></span>
<span class="line"><span>import createContext from &quot;zustand/context&quot;; // 最佳实践: 你可以把createContext()和createStore移到一个单独的文件(store.js)，然后在在你需要的地方导入Provider, useStore const { Provider, useStore } = createContext(); const createStore = () =&gt; create((set) =&gt; ({ bears: 0, increasePopulation: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })), removeAllBears: () =&gt; set({ bears: 0 }) })); const Button = () =&gt; { return ( {/** store() - 这将在每次使用Button组件的时候创建一个store，而不是所有组件使用一个store。 **/} &lt;Provider createStore={createStore}&gt; &lt;ButtonChild /&gt; &lt;/Provider&gt; ); }; const ButtonChild = () =&gt; { const state = useStore(); return ( &lt;div&gt; {state.bears} &lt;button onClick={() =&gt; { state.increasePopulation(); }} &gt; + &lt;/button&gt; &lt;/div&gt; ); }; export default function App() { return ( &lt;div className=&quot;App&quot;&gt; &lt;Button /&gt; &lt;Button /&gt; &lt;/div&gt; ); }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="使用-props-初始化-createcontext-在-ts-中" tabindex="-1">使用 props 初始化 createContext(在 TS 中) <a class="header-anchor" href="#使用-props-初始化-createcontext-在-ts-中" aria-label="Permalink to &quot;使用 props 初始化 createContext(在 TS 中)&quot;">​</a></h3><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import create from &quot;zustand&quot;;</span></span>
<span class="line"><span>import createContext from &quot;zustand/context&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type</span></span>
<span class="line"><span>BearState = { bears: number; increase: () =&gt; void; }; // 将类型传递给\`createContext\`，而不是传递给\`create\`。 const { Provider, useStore } = createContext&lt;BearState&gt;(); export default function App({ initialBears }: { initialBears: number }) { return ( &lt;Provider createStore={() =&gt; create((set) =&gt; ({ bears: initialBears, increase: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })), })) } &gt; &lt;Button /&gt; &lt;/Provider&gt; ); }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="为-store-提供类型和combine中间件" tabindex="-1">为 store 提供类型和<code>combine</code>中间件 <a class="header-anchor" href="#为-store-提供类型和combine中间件" aria-label="Permalink to &quot;为 store 提供类型和\`combine\`中间件&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// 你可以用 \`type\` type BearState = { bears: number; increase: (by: number) =&gt; void; }; // 或 \`interface\` interface BearState { bears: number; increase: (by: number) =&gt; void; } // 它们都有效 const useStore = create&lt;BearState&gt;((set) =&gt; ({ bears: 0, increase: (by) =&gt; set((state) =&gt; ({ bears: state.bears + by })), }));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者，使用<code>combine</code>，让 tsc 推断出类型。这将浅层合并两个状态。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { combine } from &quot;zustand/middleware&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const useStore = create(combine({ bears: 0 }, (set) =&gt; ({ increase: (by: number) =&gt; set((state) =&gt; ({ bears: state.bears + by })), })));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用多个中间件的类型可能需要一些 TypeScript 知识。参考<a href="https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx" target="_blank" rel="noreferrer">middlewareTypes.test.tsx</a>中的一些实例。</p><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ul><li></li></ul><p>你可能想知道如何组织你的代码以更好地维护: <a href="https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices" target="_blank" rel="noreferrer">将 store 分割成独立的片断</a>。</p><ul><li>对于这个库的推荐用法: <a href="https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice" target="_blank" rel="noreferrer">Flux 启发的实践</a>。</li></ul><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><p>关于 Zustand 的测试信息，请访问专门的<a href="https://github.com/pmndrs/zustand/wiki/Testing" target="_blank" rel="noreferrer">Wiki 页面</a>。</p><h2 id="第三方库" tabindex="-1">第三方库 <a class="header-anchor" href="#第三方库" aria-label="Permalink to &quot;第三方库&quot;">​</a></h2><p>一些用户可能想要扩展 Zustand 的功能集，这可以通过社区制作的第三方库来完成。有关 Zustand 的第三方库的信息，请访问专门的<a href="https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries" target="_blank" rel="noreferrer">Wiki 页面</a>。</p><h2 id="与其他库的比较" tabindex="-1">与其他库的比较 <a class="header-anchor" href="#与其他库的比较" aria-label="Permalink to &quot;与其他库的比较&quot;">​</a></h2><ul><li><a href="https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio" target="_blank" rel="noreferrer">Zustand 和 valtio 的区别</a></li></ul><blockquote><p>原文: <a href="https://github.com/pmndrs/zustand" target="_blank" rel="noreferrer">https://github.com/pmndrs/zustand</a></p></blockquote><h2 id="重置状态" tabindex="-1">重置状态 <a class="header-anchor" href="#重置状态" aria-label="Permalink to &quot;重置状态&quot;">​</a></h2><p><a href="https://docs.pmnd.rs/zustand/guides/how-to-reset-state" target="_blank" rel="noreferrer">https://docs.pmnd.rs/zustand/guides/how-to-reset-state</a> 以下模式可用于将状态重置为其初始值</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">create</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;zustand&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// define types for state values and actions separately</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> State</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	salmon</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">number</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	tuna</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">number</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Actions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	addSalmon</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">qty</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">number</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> void</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	addTuna</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">qty</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">number</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> void</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	reset</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: () </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> void</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// define the initial state</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> initialState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">State</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	salmon</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	tuna</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// create store</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> useSlice</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> create</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">State</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> &amp; </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Actions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt;()((</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">set</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">get</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> ({</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">initialState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	addSalmon</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">qty</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">number</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">		set</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">salmon</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> get</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">salmon</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> qty</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	},</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	addTuna</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">qty</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">number</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">		set</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">tuna</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> get</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">tuna</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> qty</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	},</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	reset</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">		set</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">initialState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	},</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>一次重置多个商店</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { create as _create } from &#39;zustand&#39;</span></span>
<span class="line"><span>import type { StateCreator } from &#39;zustand&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const storeResetFns = new Set&lt;() =&gt; void&gt;()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const resetAllStores = () =&gt; {</span></span>
<span class="line"><span>	storeResetFns.forEach((resetFn) =&gt; {</span></span>
<span class="line"><span>		resetFn()</span></span>
<span class="line"><span>	})</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export const create = (&lt;T extends unknown&gt;() =&gt; {</span></span>
<span class="line"><span>	return (stateCreator: StateCreator&lt;T&gt;) =&gt; {</span></span>
<span class="line"><span>		const store = _create(stateCreator)</span></span>
<span class="line"><span>		const initialState = store.getState()</span></span>
<span class="line"><span>		storeResetFns.add(() =&gt; {</span></span>
<span class="line"><span>			store.setState(initialState, true)</span></span>
<span class="line"><span>		})</span></span>
<span class="line"><span>		return store</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}) as typeof _create</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="使用-useshallow-防止重新渲染" tabindex="-1">使用 useShallow 防止重新渲染 <a class="header-anchor" href="#使用-useshallow-防止重新渲染" aria-label="Permalink to &quot;使用 useShallow 防止重新渲染&quot;">​</a></h2><p>When you need to subscribe to a computed state from a store, the recommended way is to use a selector. 当需要从store中订阅计算状态时，建议使用selector选择器。</p><p>The computed selector will cause a rererender if the output has changed according to Object.is. 如果输出已根据 Object.is 更改，则计算选择器将导致重新渲染。</p><p>In this case you might want to use useShallow to avoid a rerender if the computed value is always shallow equal the previous one. 在这种情况下，如果计算值始终浅等于前一个值，则可能需要使用 useShallow 来避免重新呈现。</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">create</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;zustand&#39;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">useShallow</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;zustand/react/shallow&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> useMeals</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> create</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> ({</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	papaBear</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;large porridge-pot&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	mamaBear</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;middle-size porridge pot&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	littleBear</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;A little, small, wee pot&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> BearNames</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> names</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useMeals</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">useShallow</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">state</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">names</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;, &#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> &lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,128);function u(b,k,m,g,y,v){const a=t,n=i,e=p;return c(),r("div",null,[d,s(a,{readTime:"15",words:"3.6k"}),s(n),s(e)])}const C=l(h,[["render",u]]);export{F as __pageData,C as default};
