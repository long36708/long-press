import{_ as l,a as t,b as p}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as h,c as r,I as s,j as a,a as k,a7 as c,o as d}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const v=JSON.parse('{"title":"设计文档：useEffectEnhanced","description":"","frontmatter":{},"headers":[],"relativePath":"react/自定义Hooks/useEffectEnhanced.md","filePath":"react/自定义Hooks/useEffectEnhanced.md","lastUpdated":1714554379000}'),o={name:"react/自定义Hooks/useEffectEnhanced.md"},B=a("h1",{id:"设计文档-useeffectenhanced",tabindex:"-1"},[k("设计文档：useEffectEnhanced "),a("a",{class:"header-anchor",href:"#设计文档-useeffectenhanced","aria-label":'Permalink to "设计文档：useEffectEnhanced"'},"​")],-1),g=c(`<div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> *</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;react&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/** As \`React.useEffect\` but pass origin value in callback and not need care deps length change. */</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useEffect</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	callback</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">prevDeps</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[]) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> void</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	deps</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[],</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> prevRef</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> React</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">useRef</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">deps</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">	React</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">useEffect</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">			deps</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> !==</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> prevRef</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">current</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> ||</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">			deps</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">some</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">dep</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">index</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> dep</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> !==</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> prevRef</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">current</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">		) {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">			callback</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">prevRef</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">current</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">		prevRef</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">current</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> deps</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	});</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h2><p><code>useEffectEnhanced</code> 是一个自定义React Hook，它是基于React的内置Hook <code>React.useEffect</code> 进行扩展，旨在解决依赖项变化时，不仅执行回调函数，而且将上一轮依赖项的值作为参数传递给回调函数。这有助于开发者无需关心依赖项数组长度的变化，只需关注依赖项内容的变更。</p><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><ol><li><strong>依赖项变更监测</strong>：当传入的 <code>deps</code> 数组内容发生变化时，触发副作用函数 <code>callback</code> 的执行。</li><li><strong>传递旧依赖项</strong>：在副作用函数 <code>callback</code> 的执行过程中，会把上一轮依赖项的值（<code>prevDeps</code>）作为参数传递进去。</li></ol><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><ul><li><p><strong>callback</strong>: <code>(prevDeps: any[]) =&gt; void</code></p><ul><li>类型：回调函数，接收一个数组参数 <code>prevDeps</code>，表示上一轮的依赖项数组。</li><li>功能：每当依赖项数组内容发生变更时，该函数会被调用，以便开发者可以在回调函数中对比新旧依赖项的内容。</li></ul></li><li><p><strong>deps</strong>: <code>any[]</code></p><ul><li>类型：数组，包含需要监视变化的依赖项。</li><li>功能：用来决定何时应该触发副作用函数的执行。当数组内容（元素数量或内容）发生改变时，视为依赖项变化。</li></ul></li></ul><h2 id="工作机制" tabindex="-1">工作机制 <a class="header-anchor" href="#工作机制" aria-label="Permalink to &quot;工作机制&quot;">​</a></h2><ol><li>使用 <code>React.useRef</code> 存储当前的依赖项数组（<code>prevRef.current = deps</code>）。</li><li>使用 <code>React.useEffect</code> 监听 <code>deps</code> 的变化。</li><li>在 <code>useEffect</code> 回调函数中，比较当前的 <code>deps</code> 与 <code>prevRef.current</code> 是否发生了变化。如果长度不同或者内容有差异，则执行用户提供的 <code>callback</code>，并传入 <code>prevRef.current</code> 作为参数。</li><li>更新 <code>prevRef.current</code> 的值，使之与当前的 <code>deps</code> 保持一致。</li></ol><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><ul><li>在需要了解依赖项变化前后具体内容差异的情况下，<code>useEffectEnhanced</code> 提供了更为便捷的解决方案。</li><li>当依赖项列表长度动态变化时，无需担心因长度变化导致的无效渲染问题。</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import React from &#39;react&#39;;</span></span>
<span class="line"><span>import useEffectEnhanced from &#39;./useEffectEnhanced&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function MyComponent({ items }) {</span></span>
<span class="line"><span>  useEffectEnhanced((prevItems) =&gt; {</span></span>
<span class="line"><span>    console.log(&#39;Previous items:&#39;, prevItems);</span></span>
<span class="line"><span>    console.log(&#39;New items:&#39;, items);</span></span>
<span class="line"><span>    // Compare previous and current items here and perform necessary actions</span></span>
<span class="line"><span>  }, [items]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default MyComponent;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在这个示例中，每当 <code>items</code> 发生变化时，<code>useEffectEnhanced</code> 的回调函数就会被执行，并把上次的 <code>items</code> 作为参数传入。这样就可以在回调中轻松对比新旧数据，进而做出相应的处理。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,15);function u(y,b,f,m,E,F){const i=l,n=t,e=p;return d(),r("div",null,[B,s(i,{readTime:"2",words:"648"}),g,s(n),s(e)])}const D=h(o,[["render",u]]);export{v as __pageData,D as default};
