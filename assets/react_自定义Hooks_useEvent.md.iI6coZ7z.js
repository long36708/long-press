import{_ as l,a as p,b as t}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as h,c as r,I as s,j as a,a as k,a7 as c,o}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const D=JSON.parse('{"title":"设计文档：useEvent Hook","description":"","frontmatter":{},"headers":[],"relativePath":"react/自定义Hooks/useEvent.md","filePath":"react/自定义Hooks/useEvent.md","lastUpdated":1714554379000}'),d={name:"react/自定义Hooks/useEvent.md"},u=a("h1",{id:"设计文档-useevent-hook",tabindex:"-1"},[k("设计文档：useEvent Hook "),a("a",{class:"header-anchor",href:"#设计文档-useevent-hook","aria-label":'Permalink to "设计文档：useEvent Hook"'},"​")],-1),b=c(`<div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> *</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;react&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useEvent</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Function</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">callback</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> fnRef</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> React</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">useRef</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">	fnRef</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">current</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> callback</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> memoFn</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> React</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">useCallback</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">		((...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> fnRef</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">current</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">?.(...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">		[],</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> memoFn</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p><code>useEvent</code> 是一个自定义的React Hook，它允许开发者在React组件中创建一个可记忆（memoized）的事件处理器函数。这个处理器会包裹用户提供的一次性回调函数（<code>callback</code> ），并在组件生命周期中维持对该回调函数的引用，确保在重新渲染时不会丢失事件处理器的引用，从而避免不必要的事件绑定和解绑操作。</p><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><ul><li><code>callback</code>：类型约束为 <code>T extends Function</code>，表示用户提供的事件处理回调函数，它接收一组不定参数（<code>...args: any</code> ）并在执行时转发这些参数给内部维护的回调函数。</li></ul><h2 id="内部逻辑" tabindex="-1">内部逻辑 <a class="header-anchor" href="#内部逻辑" aria-label="Permalink to &quot;内部逻辑&quot;">​</a></h2><ol><li><p>使用 <code>React.useRef</code> 创建一个可变的引用（<code>fnRef</code>），用于存储用户提供的 <code>callback</code> 函数。<code>fnRef.current</code> 在组件整个生命周期中保持不变，使得即使组件重新渲染，<code>callback</code> 函数的引用也不会丢失。</p></li><li><p>利用 <code>React.useCallback</code> 创建一个记忆化的函数 <code>memoFn</code>。这个函数的实现是调用 <code>fnRef.current</code> 传入相同的参数，并对其进行了类型断言（<code>as any</code>），以确保返回的类型与传入的 <code>callback</code> 类型一致。</p><ul><li><code>memoFn</code> 的依赖数组为空数组 <code>[]</code>，这意味着只要 <code>callback</code> 不变，<code>memoFn</code> 就始终保持同一个引用，提高了性能并规避了不必要的组件重渲染。</li></ul></li><li><p>最终，<code>useEvent</code> 返回这个记忆化的 <code>memoFn</code> 函数，开发者可以将它作为事件处理器绑定到各种DOM事件或其他React组件的事件中。</p></li></ol><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import React, { useState } from &#39;react&#39;;</span></span>
<span class="line"><span>import useEvent from &#39;./useEvent&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function Counter() {</span></span>
<span class="line"><span>  const [count, setCount] = useState(0);</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  const handleClick = useEvent((event) =&gt; {</span></span>
<span class="line"><span>    setCount(count + 1);</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;button onClick={handleClick}&gt;</span></span>
<span class="line"><span>      Click me! Count: {count}</span></span>
<span class="line"><span>    &lt;/button&gt;</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default Counter;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这个示例中，<code>handleClick</code> 通过 <code>useEvent</code> Hook 创建了一个稳定的事件处理器函数，即使 <code>Counter</code> 组件重新渲染，按钮的点击事件处理函数也不会失效，从而保证了计数器功能的正常运行。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,11);function B(g,m,y,F,C,E){const n=l,i=p,e=t;return o(),r("div",null,[u,s(n,{readTime:"1",words:"552"}),b,s(i),s(e)])}const v=h(d,[["render",B]]);export{D as __pageData,v as default};
