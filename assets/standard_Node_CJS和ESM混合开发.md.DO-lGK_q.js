import{_ as t,a as o,b as p}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as r,c as i,I as s,a7 as l,o as c}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const d="/long-press/assets/f2132185.uNlmhqU8.png",m="/long-press/assets/0601fbf5.C_6okXhK.png",u="/long-press/assets/e4fd56b6.CUzp9js9.png",b="/long-press/assets/61cbf346.DmRhQ-WE.png",h="/long-press/assets/e2cae86b.QYzRgDdS.png",g="/long-press/assets/153f81d7.CsmwTk2G.png",_="/long-press/assets/9a80a105.Dt_DKOAe.png",f="/long-press/assets/fcfd0c9e.CsDxcif1.png",k="/long-press/assets/9456c344.C46W1fXb.png",y="/long-press/assets/8657eeee.oQ1bBCFl.png",S="/long-press/assets/b7d0fbc8.DB2TdpGL.png",q="/long-press/assets/813c199b.DG4Wbebr.png",x="/long-press/assets/700a0d29.D-U2ZOvO.png",T=JSON.parse('{"title":"Node CJS 和ESM 混合开发","description":"","frontmatter":{},"headers":[],"relativePath":"standard/Node_CJS和ESM混合开发.md","filePath":"standard/Node_CJS和ESM混合开发.md","lastUpdated":1711902617000}'),v={name:"standard/Node_CJS和ESM混合开发.md"},C=l('<h1 id="node-cjs-和esm-混合开发" tabindex="-1">Node CJS 和ESM 混合开发 <a class="header-anchor" href="#node-cjs-和esm-混合开发" aria-label="Permalink to &quot;Node CJS 和ESM 混合开发&quot;">​</a></h1><h2 id="禁止-module-exports-和-exports-fn-混用" tabindex="-1">禁止 module.exports 和 exports.fn 混用 <a class="header-anchor" href="#禁止-module-exports-和-exports-fn-混用" aria-label="Permalink to &quot;禁止 module.exports 和 exports.fn 混用&quot;">​</a></h2><p><img src="'+d+'" alt=""></p><p><img src="'+m+'" alt=""></p><h2 id="解决filename-dirname无法直接使用" tabindex="-1">解决filename,dirname无法直接使用 <a class="header-anchor" href="#解决filename-dirname无法直接使用" aria-label="Permalink to &quot;解决filename,dirname无法直接使用&quot;">​</a></h2><p><img src="'+u+'" alt=""></p><h2 id="导入pkg的方法" tabindex="-1">导入pkg的方法 <a class="header-anchor" href="#导入pkg的方法" aria-label="Permalink to &quot;导入pkg的方法&quot;">​</a></h2><p><img src="'+b+'" alt=""></p><p><img src="'+h+'" alt=""></p><p><img src="'+g+'" alt=""></p><p><img src="'+_+'" alt=""></p><h2 id="或者放入到立即执行函数中-async-await可以使用" tabindex="-1">或者放入到立即执行函数中 async await可以使用 <a class="header-anchor" href="#或者放入到立即执行函数中-async-await可以使用" aria-label="Permalink to &quot;或者放入到立即执行函数中 async await可以使用&quot;">​</a></h2><p><img src="'+f+'" alt=""></p><h2 id="不建议混用-建议使用esmodule-因为esm兼容commonjs" tabindex="-1">不建议混用，建议使用esModule，因为ESM兼容commonjs <a class="header-anchor" href="#不建议混用-建议使用esmodule-因为esm兼容commonjs" aria-label="Permalink to &quot;不建议混用，建议使用esModule，因为ESM兼容commonjs&quot;">​</a></h2><p><img src="'+k+'" alt=""></p><h2 id="常见错误" tabindex="-1">常见错误 <a class="header-anchor" href="#常见错误" aria-label="Permalink to &quot;常见错误&quot;">​</a></h2><p><img src="'+y+'" alt=""><img src="'+S+'" alt=""><img src="'+q+'" alt=""><img src="'+x+`" alt=""></p><h2 id="引入纯-esm-模块化的第三方包" tabindex="-1">引入纯 ESM 模块化的第三方包 <a class="header-anchor" href="#引入纯-esm-模块化的第三方包" aria-label="Permalink to &quot;引入纯 ESM 模块化的第三方包&quot;">​</a></h2><p><a href="https://blog.csdn.net/xs20691718/article/details/122727795?spm=1001.2014.3001.5502" target="_blank" rel="noreferrer">https://blog.csdn.net/xs20691718/article/details/122727795?spm=1001.2014.3001.5502</a></p><p>引入一个概念 Pure ESM package，也就是纯 ESM 模块化的包， 如果要使用这种第三方库，可以阅读文档：<a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c" target="_blank" rel="noreferrer">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></p><p>如果一个库是 Pure ESM package 的话，它就没办法再被 commonjs 标准的代码使用 require 引用了，如果要解决这个问题，文档中提出了三种方案：</p><ul><li>Use ESM yourself. **(preferred)**Use import foo from &#39;foo&#39; instead of const foo = require(&#39;foo&#39;) to import the package. You also need to put &quot;type&quot;: &quot;module&quot; in your package.json and more. Follow the below guide.</li><li>If the package is used in an async context, you could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports" target="_blank" rel="noreferrer">await import(…)</a> from CommonJS instead of require(…).</li><li>Stay on the existing version of the package until you can move to ESM.</li></ul><p>关于 nodejs 中如何处理 ES6 模块的，可以参考：<a href="https://www.ruanyifeng.com/blog/2020/08/how-nodejs-use-es6-module.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2020/08/how-nodejs-use-es6-module.html</a></p><ol><li><p>Use ESM yourself 第一种方式比较扯，就是把你自己的库也改成 ESM 标准，这就很坑了，这不是扩大了兼容性的问题了嘛。</p></li><li><p>use await import(…) 第二种方式，就是将静态的 import 语句，改为动态的 import() 方法，例如：</p></li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// before</span></span>
<span class="line"><span>import { xxx } from &#39;globby&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// after</span></span>
<span class="line"><span>const { xxx } = await import(&#39;globby&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>理论上讲好像可以，但是我实际尝试的时候，发现如果 tsc 编译后为 commonjs 标准的话， <code>import() </code>方法会被转化为一个<code>__importStar(require(&#39;globby&#39;))</code>方法，本质上还是 <code>require()</code> ？所以还是会报错。</p><p>需要进一步调研看看。</p><ol start="3"><li>Stay on the existing version of the package until you can move to ESM 这个方法也很扯淡，就是在你可以将你的项目改为 ESM 标准之前，使用旧版本的 commonjs 标准的第三方库。</li></ol><p>解决方法 上面的三种方式，都没有解决问题，只能采取一种治标不治本的方式了。</p><p>既然第三方库是 ESM 标准，那么我们在 tsc 编译时，把它也编译一下好了。</p><p>以 globby 为例，在 tsconfig 文件中加入以下代码：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>	&quot;compilerOptions&quot;: {</span></span>
<span class="line"><span>		...</span></span>
<span class="line"><span>		// 因为 globby 是用 js 写的，所以在 tsconfig 中要将 allowJs 设置为 true</span></span>
<span class="line"><span>		&quot;allowJs&quot;: true</span></span>
<span class="line"><span>	},</span></span>
<span class="line"><span>	&quot;include&quot;: [</span></span>
<span class="line"><span>		&quot;node_modules/globby/**/*&quot;</span></span>
<span class="line"><span>	]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此时再运行 tsc 编译，会发现在输出的 dist 目录中，新增了一个 node_modules 目录，其中包含了编译后的 globby 包代码。</p><p>但是这里需要注意下，再次运行项目，发现还是报同样的错，只是报错的库由 globby 变成了 array-union，这 是因为 globby 是 pure ESM package，经过 tsc 编译后变成了 commonjs 标准，但是 globby 引用了 array-union，而 array-union 也是 pure ESM package。</p><p>以此类推，需要把所有的 pure ESM package 都编译一下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;include&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;node_modules/globby/**/*&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;node_modules/array-union/**/*&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">    &quot;node_modules/slash/**/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>完美，问题解决。</p><p>这里要吐槽一下，array-union 这个库，其实就一行代码： <code>constarrayUnion = (...arguments_) =&gt; [...newSet(arguments_.flat())];</code> 就这还引入一个额外的库，坑！</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,39);function E(M,w,B,j,P,A){const a=t,e=o,n=p;return c(),i("div",null,[C,s(a,{readTime:"3",words:"903"}),s(e),s(n)])}const U=r(v,[["render",E]]);export{T as __pageData,U as default};
