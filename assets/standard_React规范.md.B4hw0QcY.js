import{_ as e,a as h,b as k}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as r,D as d,c as o,j as c,a as i,I as s,a7 as a,o as g}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const x=JSON.parse('{"title":"如何写出更优雅的 React 组件 - 代码结构篇","description":"","frontmatter":{},"headers":[],"relativePath":"standard/React规范.md","filePath":"standard/React规范.md","lastUpdated":1712334308000}'),B={name:"standard/React规范.md"},y=a(`<h1 id="如何写出更优雅的-react-组件-代码结构篇" tabindex="-1">如何写出更优雅的 React 组件 - 代码结构篇 <a class="header-anchor" href="#如何写出更优雅的-react-组件-代码结构篇" aria-label="Permalink to &quot;如何写出更优雅的 React 组件 - 代码结构篇&quot;">​</a></h1><p><a href="https://juejin.cn/post/7038810014584143909" target="_blank" rel="noreferrer">https://juejin.cn/post/7038810014584143909</a></p><h2 id="创建-react-组件的10条准则" tabindex="-1">创建 React 组件的10条准则 <a class="header-anchor" href="#创建-react-组件的10条准则" aria-label="Permalink to &quot;创建 React 组件的10条准则&quot;">​</a></h2><h3 id="版本稳定" tabindex="-1">版本稳定 <a class="header-anchor" href="#版本稳定" aria-label="Permalink to &quot;版本稳定&quot;">​</a></h3><p>当创建一个 API 的时候，需要考虑的最重要的一件事是尽可能地保持 API 的稳定。 这意味着需要最大限度地减少重大变化的数量。 如果 API 真的有较大的变化，也请确保撰写了详细的升级指南，并尽可能提供一份代码模块，可以让用户自动完成升级过程。</p><p>如果正在发布 API，请确保遵循了<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语义版本规范</a>。这可以让用户轻松地决定所需的版本。</p><h3 id="提供错误描述信息" tabindex="-1">提供错误描述信息 <a class="header-anchor" href="#提供错误描述信息" aria-label="Permalink to &quot;提供错误描述信息&quot;">​</a></h3><p>每当调用 API 发生错误时，你需要尽可能地去解释发生了什么问题，以及如何去修复错误。</p><p>在没有任何提醒或信息的情况下，直接抛出一个“错误使用”来羞辱调用者貌似不是一种良好的用户体验。</p><p>相反，撰写描述性错误信息可以帮助调用者来修改他们调用 API 的方式。</p><h3 id="别让程序猿犯嘀咕" tabindex="-1">别让程序猿犯嘀咕 <a class="header-anchor" href="#别让程序猿犯嘀咕" aria-label="Permalink to &quot;别让程序猿犯嘀咕&quot;">​</a></h3><p>程序猿是脆弱的，而且你也不希望他们在使用 API 的时候吓到他们。</p><p>也就是说，API 应该尽可能直观。可以通过遵循最佳实践和现有的命名习惯来实现这一点。</p><p>另外还需要注意一点：保持代码风格的连贯。</p><p>如果在布尔属性的名称前加上了 is 或者 has 作为前缀，但是接下来却又不这么做了，这就会让人感到费解。</p><h3 id="精简-api-结构" tabindex="-1">精简 API 结构 <a class="header-anchor" href="#精简-api-结构" aria-label="Permalink to &quot;精简 API 结构&quot;">​</a></h3><p>当我们在讨论做减法的时候，同样也包括减少 API 。 功能多了固然很好，但是 API 的结构越简单，调用者的学习成本就越小。 反过来讲，这会被认为是一个简单易用的 API 。</p><p>总有办法来控制 API 的大小，其中的一个办法是，从旧的 API 中重构出一个新的API。</p><h3 id="写文档" tabindex="-1">写文档 <a class="header-anchor" href="#写文档" aria-label="Permalink to &quot;写文档&quot;">​</a></h3><p>如果没有文档来记录组件是如何使用的，好吧，虽然大多数开发者会随时查看你的代码，但这不能说是一种良好的用户体验。 无论选择哪个，都请确保在文档中记录了 API 的用法 ，以及组件的用法和使用时机。 后者在共享组件库中尤为重要。</p><h3 id="允许上下文语义" tabindex="-1">允许上下文语义 <a class="header-anchor" href="#允许上下文语义" aria-label="Permalink to &quot;允许上下文语义&quot;">​</a></h3><p>HTML 是一种通过语义化的方式来组织信息的语言。 大多数组件是使用 <code>&lt;div /&gt;</code>标签来构建的。 这在某种程度上是有道理的——因为通用组件不清楚它到底应该是一个 <code>&lt;article /&gt; </code>还是<code> &lt;section /&gt;</code> 或者是<code> &lt;aside /&gt;</code> ，尽管如此，但只用<code>&lt;div/&gt;</code>来构建也并不完美。</p><p>相反，我们建议允许组件接受一个 as 属性，它将始终覆盖正在呈现的DOM 元素。下面是一个实现它的例子：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> Grid</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">as</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Element</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, ...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> className</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;grid&quot;</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> {</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">Grid</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">defaultProps</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	as</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;div&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我们将 as 属性重命名为局部变量 Element，并在 JSX 中使用它。当不需要更多语义化的 HTML 标签时，我们也提供了普通的默认值来传给组件。</p>`,25),F=a(`<div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> App</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Grid</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> as</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">MoreContent</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Grid</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>请注意上面的代码在 React 组件中同样有效。下面是一个很好的例子，展示了如果想让一个<code>&lt;Button /&gt;</code>组件呈现一个 React Router<code> &lt;Link /&gt;</code>。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&lt;Button as={Link} to=&quot;/profile&quot;&gt;</span></span>
<span class="line"><span>  Go to Profile</span></span>
<span class="line"><span>&lt;/Button&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="使用-props-children" tabindex="-1">使用 props.children <a class="header-anchor" href="#使用-props-children" aria-label="Permalink to &quot;使用 props.children&quot;">​</a></h3><p>React 中有几个特殊的属性，他们的处理方式与其他属性不太一样。其中一个就是key，用来在有序列表中追踪列表项的，另一个就是children。</p><p>在一个开始标签和结束标签之间的任何东西都被放置在props.children属性中，推荐尽量多使用这个属性。</p><p>推荐的原因是使用props.children属性比起使用content属性，或者其他只接受类似文本的简单值的属性来说，要简便的多。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&lt;TableCell content=&quot;Some text&quot; /&gt; // vs &lt;TableCell&gt;Some text&lt;/TableCell&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 props.children还有几个好处。首先，它的写法和普通的 HTML 是一样的。 第二，你可以向组件传递任何想要的东西，而不是向组件中添加 leftIcon 和 rightIcon 属性，把他们作为 props.children 的一部分传递给组件即可。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&lt;TableCell&gt; &lt;ImportantIcon /&gt; Some text &lt;/TableCell&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你可能会说，我的组件只会渲染普通的文本，不需要渲染其他东西。 在某些情况下可能是正确的，至少现在是没问题的。而在未来需求变化的时候，你就会发现使用 props.children 的好处。</p><h3 id="扩散剩余属性" tabindex="-1">扩散剩余属性 <a class="header-anchor" href="#扩散剩余属性" aria-label="Permalink to &quot;扩散剩余属性&quot;">​</a></h3><p>每当创建一个新的组件的时候，请确保将剩余的属性也扩散到有意义的元素上。</p><p>如果有某些属性仅需传递给子组件或子元素而组件自身并不需要这个属性），那就不必添加到你的组件中，这么做可以让组件 API 更加稳定，即使当下一个开发者需要新事件监听器的时候，也无需发布新版本的组件。</p><p>例如：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> ToolTip</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">isVisible</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, ...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">rest</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> isVisible</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> role</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;tooltip&quot;</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> {</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">rest</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> /&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你的组件可以向底层组件或元素传递属性，比如 className 或者 onClick 的监听函数，一定要确保外部的调用者一样可以这样做。 比如在 class 这种情况中，你可以使用 npm 上的 classname 包来方便地添加 class 属性（或者干脆直接用简单的 string 字符串）。</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> classNames</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;classnames&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> ToolTip</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">span</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">			{</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			className</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">classNames</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;tooltip&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">props</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">tooltip</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		/&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="在事件监听回调的情况下-可以用一个小工具函数将它们合并成单个函数。" tabindex="-1">在事件监听回调的情况下，可以用一个小工具函数将它们合并成单个函数。 <a class="header-anchor" href="#在事件监听回调的情况下-可以用一个小工具函数将它们合并成单个函数。" aria-label="Permalink to &quot;在事件监听回调的情况下，可以用一个小工具函数将它们合并成单个函数。&quot;">​</a></h4><p>例如：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> combine</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">functions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">		functions</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">			.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">filter</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">func</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> typeof</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> func</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;function&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">			.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">func</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>现在，我们创建了一个以函数数组为参数的函数，它返回一个新的回调函数，该回调函数会向各个函数传入相同的参数，并依次调用各个函数。</p><p>示例代码：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> ToolTip</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">isVisible</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">setVisible</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> React</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">useState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">span</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">			{</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			className</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">classNames</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;tooltip&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">props</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">className</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			onMouseIn</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">combine</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> setVisible</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">props</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">onMouseIn</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			onMouseOut</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">combine</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> setVisible</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">props</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">onMouseOut</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		/&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="充分提供默认值" tabindex="-1">充分提供默认值 <a class="header-anchor" href="#充分提供默认值" aria-label="Permalink to &quot;充分提供默认值&quot;">​</a></h3><p>请确保为属性提供了充分的默认值，这样做可以最大限度地减少必传值的数量，而且也大大简化了代码实现。</p><p>以 onClick 处理函数为例，如果它不是必需的，就可以提供一个空函数来作为默认值。这样，你就可以在代码中随时调用它，就好像组件总是被提供了回调函数一样。</p><p>另一个例子是自定义输入。 除非明确提供，否则假设输入的字符串是空字符串。 这将使你确保始终处理字符串对象，而不是 undefined 或 null 。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,29);function u(b,m,A,C,D,f){const n=d("Grid"),t=e,l=h,p=k;return g(),o("div",null,[y,c("p",null,[i("当使用 "),s(n),i(" 组件的时候，你可以传入合适的标签：")]),F,s(t,{readTime:"5",words:"1.8k"}),s(l),s(p)])}const P=r(B,[["render",u]]);export{x as __pageData,P as default};
