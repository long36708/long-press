import{_ as p,a as l,b as i}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as r,c,I as n,a7 as o,o as t}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const C=JSON.parse('{"title":"package.json 的版本号","description":"","frontmatter":{},"headers":[],"relativePath":"standard/package.json.md","filePath":"standard/package.json.md","lastUpdated":1713718044000}'),b={name:"standard/package.json.md"},u=o(`<h1 id="package-json-的版本号" tabindex="-1">package.json 的版本号 <a class="header-anchor" href="#package-json-的版本号" aria-label="Permalink to &quot;package.json 的版本号&quot;">​</a></h1><h1 id="组成部分" tabindex="-1">组成部分 <a class="header-anchor" href="#组成部分" aria-label="Permalink to &quot;组成部分&quot;">​</a></h1><p>(1)、第一部分为主版本号，变化了有了一个不兼容上个版本的大更改。 (2)、第二部分为次版本号，变化了表示增加了新功能，并且可以向后兼容。 (3)、第三部分为修订版本号，变化了表示有bug修复，并且可以向后兼容。 (4)、第四部分为日期版本号和希腊字母版本号，希腊字母版本号共有五种，分为 base、alpha、beta、RC、release</p><p>总结</p><p>paceage.json文件中包含版本，解析地址，依赖信息等等，因此当我们重新执行 npm install 的时候，node从package.json 中读取到了各个依赖包的名称，然后如果存在package-lock.json文件，那么会从package-lock.json文件中获取版本号，再进行下载或者更新;</p><h1 id="相关地址" tabindex="-1">相关地址 <a class="header-anchor" href="#相关地址" aria-label="Permalink to &quot;相关地址&quot;">​</a></h1><p><a href="https://docs.npmjs.com/about-semantic-versioning" target="_blank" rel="noreferrer">https://docs.npmjs.com/about-semantic-versioning</a></p><p><a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">https://semver.org/lang/zh-CN/</a></p><h2 id="如何自动更新package-json-的版本号呢" tabindex="-1">如何自动更新package.json 的版本号呢？ <a class="header-anchor" href="#如何自动更新package-json-的版本号呢" aria-label="Permalink to &quot;如何自动更新package.json 的版本号呢？&quot;">​</a></h2><p>要自动更新 package.json 文件中的版本号 安装 npm ：确保你已经安装了 Node.js 和 npm，因为它们是管理 JavaScript 项目和包依赖的工具。</p><p>在你的项目根目录下打开终端，并执行以下命令安装</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm install -g npm-version-bump</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>现在你可以使用以下命令来自动增加版本号：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm version [&lt;newversion&gt; | major | minor | patch] [-m &lt;commit message&gt;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><ul><li>例如，要将版本号增加到 1.0.1，你可以运行以下命令</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm version patch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>例如从 1.0.1 增加到 2.0.0。</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm version major</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>例如从 1.0.1 增加到 1.1.0</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm version minor</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="changesets-cli-monorepo项目发包工具" tabindex="-1">@changesets/cli - Monorepo项目发包工具 <a class="header-anchor" href="#changesets-cli-monorepo项目发包工具" aria-label="Permalink to &quot;@changesets/cli - Monorepo项目发包工具&quot;">​</a></h1><h2 id="添加变更集工具" tabindex="-1">添加变更集工具 <a class="header-anchor" href="#添加变更集工具" aria-label="Permalink to &quot;添加变更集工具&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npm install @changesets/cli &amp;&amp; npx changeset init</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn add @changesets/cli &amp;&amp; yarn changeset init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="添加变更集" tabindex="-1">添加变更集 <a class="header-anchor" href="#添加变更集" aria-label="Permalink to &quot;添加变更集&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npx changeset</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn changeset</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="版本控制和发布" tabindex="-1">版本控制和发布 <a class="header-anchor" href="#版本控制和发布" aria-label="Permalink to &quot;版本控制和发布&quot;">​</a></h2><p>yarn changeset version</p><p>这将使用所有变更集，并根据这些变更集更新到最合适的 semver 版本。它还为每个使用的变更集写入变更日志条目。</p><p>yarn changeset publish 这将在每个包中运行 npm publish，该包的版本高于当前在 npm 上列出的包。</p><h2 id="no-git-tag-跳过打标签" tabindex="-1">--no-git-tag 跳过打标签 <a class="header-anchor" href="#no-git-tag-跳过打标签" aria-label="Permalink to &quot;--no-git-tag 跳过打标签&quot;">​</a></h2><p>当您运行<code>changeset publish --no-git-tag --snapshot</code>时，变更集将跳过为已发布的快照包创建 git 标记。这意味着在推送稳定版本时仍然可以创建 git 标签（使用常规<code>changeset publish</code>版本），并且您可以安全地在本地发布快照版本，而无需创建不必要的标签。</p><h2 id="【-changesets-cli】变更集实战教程" tabindex="-1">【@changesets/cli】变更集实战教程 <a class="header-anchor" href="#【-changesets-cli】变更集实战教程" aria-label="Permalink to &quot;【@changesets/cli】变更集实战教程&quot;">​</a></h2><p><a href="https://blog.csdn.net/bobo789456123/article/details/137018577?spm=1001.2014.3001.5502" target="_blank" rel="noreferrer">https://blog.csdn.net/bobo789456123/article/details/137018577?spm=1001.2014.3001.5502</a></p><h2 id="np" tabindex="-1">np <a class="header-anchor" href="#np" aria-label="Permalink to &quot;np&quot;">​</a></h2><p>A better<code>npm publish</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;prepublishOnly&quot;: &quot;npm run build&quot;,</span></span>
<span class="line"><span>&quot;release&quot;: &quot;np --no-cleanup --no-tests --any-branch&quot;,</span></span>
<span class="line"><span>&quot;deploy-component&quot;: &quot;np --any-branch&quot;,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;np&quot;: &quot;^7.5.0&quot;,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;publishConfig&quot;: {</span></span>
<span class="line"><span>  &quot;access&quot;: &quot;public&quot;,</span></span>
<span class="line"><span>  &quot;registry&quot;: &quot;https://registry.npmjs.org/&quot;</span></span>
<span class="line"><span>},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;files&quot;: [</span></span>
<span class="line"><span>  &quot;lib&quot;,</span></span>
<span class="line"><span>  &quot;esm&quot;</span></span>
<span class="line"><span>],</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="npm-install-np-g-这个np包的使用注意事项-请描述" tabindex="-1">npm install np -g 这个np包的使用注意事项，请描述 <a class="header-anchor" href="#npm-install-np-g-这个np包的使用注意事项-请描述" aria-label="Permalink to &quot;npm install np -g 这个np包的使用注意事项，请描述&quot;">​</a></h3><p><code>npm install np -g</code> 这条命令是用来全局安装名为 <code>np</code> 的 npm 包。<code>np</code> 是一个辅助工具，用于简化 Node.js 包（尤其是那些发布到 npm registry 的包）的发布过程。以下是使用 <code>np</code> 包时需要注意的几个事项：</p><ol><li><p><strong>权限要求</strong>：</p><ul><li><strong>使用 <code>-g</code> 选项</strong>：由于命令中包含了 <code>-g</code>（全局）标志，这意味着 <code>np</code> 将被安装到全局 npm 目录中，通常需要管理员权限。在命令行中，可能需要使用 <code>sudo</code>（Unix/Linux/macOS）或以管理员身份运行命令提示符（Windows）来执行安装。</li></ul></li><li><p><strong>版本兼容性</strong>：</p><ul><li><strong>Node.js 和 npm 版本</strong>：确保你的系统中安装了与 <code>np</code> 兼容的 Node.js 和 npm 版本。可以在 <code>np</code> 的官方文档或 GitHub 页面查看其对环境版本的要求。通常，保持 Node.js 和 npm 的更新可以避免兼容性问题。</li></ul></li><li><p><strong>替代 <code>npm publish</code></strong>：</p><ul><li><strong>发布流程</strong>：<code>np</code> 是 <code>npm publish</code> 命令的一个封装和增强，它提供了一套标准化且可配置的发布流程，包括但不限于：自动执行 <code>prepublish</code>、<code>prepare</code>、<code>test</code> 等生命周期脚本，检查 package.json 文件完整性，生成 changelog，提交版本更新到 Git，打标签，最后才执行 <code>npm publish</code> 发布到 npm registry。使用 <code>np</code> 发布时，通常不再需要直接运行 <code>npm publish</code>。</li></ul></li><li><p><strong>配置与个性化</strong>：</p><ul><li><strong><code>.npmrc</code> 和 <code>package.json</code></strong>：<code>np</code> 会读取项目根目录下的 <code>.npmrc</code> 和 <code>package.json</code> 文件来获取发布配置。确保这些文件中的 <code>name</code>、<code>version</code>、<code>repository</code>、<code>files</code>、<code>scripts</code> 等字段正确无误，特别是 <code>publishConfig</code> 字段，可能包含发布到私有 registry 的配置。</li></ul></li><li><p><strong>Git 工作流集成</strong>：</p><ul><li><strong>Git 状态</strong>：在使用 <code>np</code> 发布前，确保你的 Git 工作区是干净的（无未提交的更改），并且处于正确的分支（通常为 <code>master</code> 或 <code>main</code>）。<code>np</code> 通常会在发布过程中自动提交更改、打标签并推送至远程仓库。</li></ul></li><li><p><strong>确认发布意图</strong>：</p><ul><li><strong>确认提示</strong>：<code>np</code> 在发布过程中会提供交互式的确认提示，确保你了解即将进行的操作。仔细阅读并确认提示信息，避免误操作导致不必要的发布。</li></ul></li><li><p><strong>遵循 SemVer</strong>：</p><ul><li><strong>版本号管理</strong>：<code>np</code> 建议遵循 Semantic Versioning（SemVer）原则管理版本号。在发布时，根据更新内容选择合适的版本号增量（major、minor、patch），确保版本升级对下游使用者的影响清晰可预期。</li></ul></li><li><p><strong>更新依赖</strong>：</p><ul><li><strong>依赖更新</strong>：如果你的包有依赖其他库，确保在发布前已更新相关依赖至最新稳定版本，并在 <code>package.json</code> 中记录正确的依赖版本范围。<code>np</code> 可能会检查依赖项并给出建议，但最终责任在于开发者。</li></ul></li></ol><p>总结来说，使用 <code>np</code> 包进行 Node.js 包发布时，需要注意权限要求、环境兼容性、配置文件的正确性、Git 工作流的整合、发布意图的确认、遵循 SemVer 版本管理原则以及依赖项的更新。遵循这些注意事项，可以确保使用 <code>np</code> 顺利且有效地完成包的发布过程。</p><h3 id="如果我需要发布一个2-0-0-beta-2的版本-使用np如何做到" tabindex="-1">如果我需要发布一个2.0.0-beta.2的版本，使用np如何做到 <a class="header-anchor" href="#如果我需要发布一个2-0-0-beta-2的版本-使用np如何做到" aria-label="Permalink to &quot;如果我需要发布一个2.0.0-beta.2的版本，使用np如何做到&quot;">​</a></h3><p>若要使用 <code>np</code> 发布一个名为 <code>2.0.0-beta.2</code> 的预发布版本，你可以按照以下步骤操作：</p><ol><li><strong>更新 package.json</strong>： 首先，确保在你的项目根目录下的 <code>package.json</code> 文件中，将 <code>version</code> 字段设置为 <code>2.0.0-beta.2</code>。这是告诉 npm 你打算发布的版本标识。</li></ol><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;your-package-name&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#0451A5;--shiki-dark:#E06C75;">  &quot;version&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;2.0.0-beta.2&quot;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // ... 其他字段</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><p><strong>清理并验证项目状态</strong>： 确保你的工作区干净（没有未提交的更改），且处于正确的发布分支（通常是 <code>master</code> 或 <code>main</code>）。所有待发布的代码改动已经提交，并推送到远程仓库。</p></li><li><p><strong>运行 <code>np</code> 命令</strong>： 打开终端，进入项目根目录，然后运行 <code>np</code> 命令。<code>np</code> 会自动检测项目状态、执行测试、构建等预发布任务，并最终发布到 npm registry。</p></li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> your-project-directory</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">np</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>np</code> 会引导你完成整个发布流程，包括确认版本信息、是否执行测试、是否生成 changelog 等。由于你已经在 <code>package.json</code> 中指定了预发布版本号，<code>np</code> 应该会识别并尊重这个设定，直接发布 <code>2.0.0-beta.2</code> 版本。</p><p><strong>注意</strong>：</p><ul><li>如果你的项目有特殊的发布流程需求，比如特定的生命周期脚本、额外的发布验证等，确保这些已经在 <code>package.json</code> 的 <code>scripts</code> 字段中定义，并且与 <code>np</code> 的工作流程兼容。</li><li>如果你的项目使用的是私有 npm registry 或需要特殊的发布配置，确保在 <code>.npmrc</code> 文件中或者 <code>package.json</code> 的 <code>publishConfig</code> 字段中已经设置了正确的信息。</li></ul><p><strong>附加选项</strong>：</p><ul><li>如果你需要跳过某些默认步骤（如测试或提交 Git），<code>np</code> 提供了一些命令行选项来定制发布流程。查阅 <code>np</code> 的官方文档或通过 <code>np --help</code> 查看可用选项，根据需要调整发布命令。</li></ul><p>按照上述步骤操作后，你应该能够成功使用 <code>np</code> 发布版本号为 <code>2.0.0-beta.2</code> 的预发布版本到 npm registry。记得密切关注 <code>np</code> 在发布过程中给出的提示和确认信息，确保每个步骤符合你的预期。</p><ol><li><p><strong><code>np --no-cleanup --no-publish --no-release-draft</code></strong>：</p><ul><li>使用<code>np</code>工具（假设已经全局或局部安装）来执行发布前的准备工作。</li><li><code>--no-cleanup</code>：禁用发布完成后清理临时文件的行为。</li><li><code>--no-publish</code>：禁止<code>np</code>在最后一步执行实际的<code>npm publish</code>操作，即不立即发布到 npm registry。</li><li><code>--no-release-draft</code>：不创建 GitHub release draft（如果项目与 GitHub 仓库关联）。这一步通常涉及生成 changelog 并在 GitHub 上创建一个待发布的版本草稿。</li></ul></li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>  &quot;prebuild&quot;: &quot;rimraf dist&quot;,</span></span>
<span class="line"><span>    &quot;prepare&quot;: &quot;npm run build&quot;,</span></span>
<span class="line"><span> &quot;release&quot;: &quot;np&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="手写一个release-ts" tabindex="-1">手写一个release.ts <a class="header-anchor" href="#手写一个release-ts" aria-label="Permalink to &quot;手写一个release.ts&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>/* eslint-disable  import/no-extraneous-dependencies,@typescript-eslint/camelcase, no-console */</span></span>
<span class="line"><span>import inquirer from &#39;inquirer&#39;;</span></span>
<span class="line"><span>import fs from &#39;fs&#39;;</span></span>
<span class="line"><span>import path from &#39;path&#39;;</span></span>
<span class="line"><span>import child_process from &#39;child_process&#39;;</span></span>
<span class="line"><span>import util from &#39;util&#39;;</span></span>
<span class="line"><span>import chalk from &#39;chalk&#39;;</span></span>
<span class="line"><span>import semverInc from &#39;semver/functions/inc&#39;;</span></span>
<span class="line"><span>import { ReleaseType } from &#39;semver&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import pkg from &#39;../package.json&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const exec = util.promisify(child_process.exec);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const run = async (command: string) =&gt; {</span></span>
<span class="line"><span>  console.log(chalk.green(command));</span></span>
<span class="line"><span>  await exec(command);</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const currentVersion = pkg.version;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const getNextVersions = (): { [key in ReleaseType]: string | null } =&gt; ({</span></span>
<span class="line"><span>  major: semverInc(currentVersion, &#39;major&#39;),</span></span>
<span class="line"><span>  minor: semverInc(currentVersion, &#39;minor&#39;),</span></span>
<span class="line"><span>  patch: semverInc(currentVersion, &#39;patch&#39;),</span></span>
<span class="line"><span>  premajor: semverInc(currentVersion, &#39;premajor&#39;),</span></span>
<span class="line"><span>  preminor: semverInc(currentVersion, &#39;preminor&#39;),</span></span>
<span class="line"><span>  prepatch: semverInc(currentVersion, &#39;prepatch&#39;),</span></span>
<span class="line"><span>  prerelease: semverInc(currentVersion, &#39;prerelease&#39;),</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const timeLog = (logInfo: string, type: &#39;start&#39; | &#39;end&#39;) =&gt; {</span></span>
<span class="line"><span>  let info = &#39;&#39;;</span></span>
<span class="line"><span>  if (type === &#39;start&#39;) {</span></span>
<span class="line"><span>    info = \`=&gt; 开始任务：\${logInfo}\`;</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    info = \`✨ 结束任务：\${logInfo}\`;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  const nowDate = new Date();</span></span>
<span class="line"><span>  console.log(</span></span>
<span class="line"><span>    \`[\${nowDate.toLocaleString()}.\${nowDate</span></span>
<span class="line"><span>      .getMilliseconds()</span></span>
<span class="line"><span>      .toString()</span></span>
<span class="line"><span>      .padStart(3, &#39;0&#39;)}] \${info}</span></span>
<span class="line"><span>    \`,</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 获取下一次版本号</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>async function prompt(): Promise&lt;string&gt; {</span></span>
<span class="line"><span>  const nextVersions = getNextVersions();</span></span>
<span class="line"><span>  const { nextVersion } = await inquirer.prompt([</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      type: &#39;list&#39;,</span></span>
<span class="line"><span>      name: &#39;nextVersion&#39;,</span></span>
<span class="line"><span>      message: \`请选择将要发布的版本 (当前版本 \${currentVersion})\`,</span></span>
<span class="line"><span>      choices: (Object.keys(nextVersions) as Array&lt;ReleaseType&gt;).map(level =&gt; ({</span></span>
<span class="line"><span>        name: \`\${level} =&gt; \${nextVersions[level]}\`,</span></span>
<span class="line"><span>        value: nextVersions[level],</span></span>
<span class="line"><span>      })),</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  ]);</span></span>
<span class="line"><span>  return nextVersion;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 更新版本号</span></span>
<span class="line"><span> * @param nextVersion 新版本号</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>async function updateVersion(nextVersion: string) {</span></span>
<span class="line"><span>  pkg.version = nextVersion;</span></span>
<span class="line"><span>  timeLog(&#39;修改package.json版本号&#39;, &#39;start&#39;);</span></span>
<span class="line"><span>  await fs.writeFileSync(path.resolve(__dirname, &#39;./../package.json&#39;), JSON.stringify(pkg));</span></span>
<span class="line"><span>  await run(&#39;npx prettier package.json --write&#39;);</span></span>
<span class="line"><span>  timeLog(&#39;修改package.json版本号&#39;, &#39;end&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>async function generateChangelog() {</span></span>
<span class="line"><span>  timeLog(&#39;生成CHANGELOG.md&#39;, &#39;start&#39;);</span></span>
<span class="line"><span>  await run(&#39; npx conventional-changelog -p angular -i CHANGELOG.md -s -r 0&#39;);</span></span>
<span class="line"><span>  timeLog(&#39;生成CHANGELOG.md&#39;, &#39;end&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 将代码提交至git</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>async function push(nextVersion: string) {</span></span>
<span class="line"><span>  timeLog(&#39;推送代码至git仓库&#39;, &#39;start&#39;);</span></span>
<span class="line"><span>  await run(&#39;git add package.json CHANGELOG.md&#39;);</span></span>
<span class="line"><span>  await run(\`git commit -m &quot;v\${nextVersion}&quot; -n\`);</span></span>
<span class="line"><span>  await run(&#39;git push&#39;);</span></span>
<span class="line"><span>  timeLog(&#39;推送代码至git仓库&#39;, &#39;end&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 组件库打包</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>async function build() {</span></span>
<span class="line"><span>  timeLog(&#39;组件库打包&#39;, &#39;start&#39;);</span></span>
<span class="line"><span>  await run(&#39;npm run build&#39;);</span></span>
<span class="line"><span>  timeLog(&#39;组件库打包&#39;, &#39;end&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 发布至npm</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>async function publish() {</span></span>
<span class="line"><span>  timeLog(&#39;发布组件库&#39;, &#39;start&#39;);</span></span>
<span class="line"><span>  await run(&#39;npm publish&#39;);</span></span>
<span class="line"><span>  timeLog(&#39;发布组件库&#39;, &#39;end&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 打tag提交至git</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>async function tag(nextVersion: string) {</span></span>
<span class="line"><span>  timeLog(&#39;打tag并推送至git&#39;, &#39;start&#39;);</span></span>
<span class="line"><span>  await run(\`git tag v\${nextVersion}\`);</span></span>
<span class="line"><span>  await run(\`git push origin tag v\${nextVersion}\`);</span></span>
<span class="line"><span>  timeLog(&#39;打tag并推送至git&#39;, &#39;end&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>async function main() {</span></span>
<span class="line"><span>  try {</span></span>
<span class="line"><span>    const nextVersion = await prompt();</span></span>
<span class="line"><span>    const startTime = Date.now();</span></span>
<span class="line"><span>    // =================== 更新版本号 ===================</span></span>
<span class="line"><span>    await updateVersion(nextVersion);</span></span>
<span class="line"><span>    // =================== 更新changelog ===================</span></span>
<span class="line"><span>    await generateChangelog();</span></span>
<span class="line"><span>    // =================== 代码推送git仓库 ===================</span></span>
<span class="line"><span>    await push(nextVersion);</span></span>
<span class="line"><span>    // =================== 组件库打包 ===================</span></span>
<span class="line"><span>    await build();</span></span>
<span class="line"><span>    // =================== 发布至npm ===================</span></span>
<span class="line"><span>    await publish();</span></span>
<span class="line"><span>    // =================== 打tag并推送至git ===================</span></span>
<span class="line"><span>    await tag(nextVersion);</span></span>
<span class="line"><span>    console.log(\`✨ 发布流程结束 共耗时\${((Date.now() - startTime) / 1000).toFixed(3)}s\`);</span></span>
<span class="line"><span>  } catch (error) {</span></span>
<span class="line"><span>    console.log(&#39;💣 发布失败，失败原因：&#39;, error);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>main();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br></div></div><p><a href="https://cloud.tencent.com/developer/article/1810012" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/1810012</a></p><h1 id="git-chglog" tabindex="-1">git-chglog <a class="header-anchor" href="#git-chglog" aria-label="Permalink to &quot;git-chglog&quot;">​</a></h1><p>&quot;chglog&quot;: &quot;git-chglog -o CHANGELOG.md&quot;,</p><h1 id="bundlesize" tabindex="-1">bundlesize <a class="header-anchor" href="#bundlesize" aria-label="Permalink to &quot;bundlesize&quot;">​</a></h1><p>&quot;bundle-check&quot;: &quot;bundlesize&quot;,</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;bundlesize&quot;: [</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;path&quot;: &quot;./dist/index.js&quot;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;maxSize&quot;: &quot;20 kB&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>],</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,67);function d(m,h,g,k,v,q){const s=p,a=l,e=i;return t(),c("div",null,[u,n(s,{readTime:"10",words:"2.7k"}),n(a),n(e)])}const j=r(b,[["render",d]]);export{C as __pageData,j as default};
