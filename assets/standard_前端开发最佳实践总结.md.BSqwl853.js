import{_ as t,a as h,b as p}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as k,c as e,I as s,j as i,a as r,a7 as d,o as g}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const v=JSON.parse('{"title":"前端开发最佳实践总结","description":"","frontmatter":{},"headers":[],"relativePath":"standard/前端开发最佳实践总结.md","filePath":"standard/前端开发最佳实践总结.md","lastUpdated":1710520336000}'),B={name:"standard/前端开发最佳实践总结.md"},y=i("h1",{id:"前端开发最佳实践总结",tabindex:"-1"},[r("前端开发最佳实践总结 "),i("a",{class:"header-anchor",href:"#前端开发最佳实践总结","aria-label":'Permalink to "前端开发最佳实践总结"'},"​")],-1),o=d(`<h2 id="开发思路" tabindex="-1">开发思路 <a class="header-anchor" href="#开发思路" aria-label="Permalink to &quot;开发思路&quot;">​</a></h2><p>前端开发时，应该如何考虑开发的主次先后，比如数据结构、数据流转、UI绘制，js逻辑等等，请给出你的最佳实践</p><p>在前端开发中，正确规划和安排各项任务的主次先后对于项目的顺利进行至关重要。以下是一个针对数据结构、数据流转、UI绘制以及JavaScript逻辑等方面的开发优先级与最佳实践建议：</p><ol><li><p><strong>需求分析与设计</strong></p><ul><li><strong>首要任务</strong>：理解业务需求，明确功能点和交互设计。这包括了解用户界面（UI）的设计稿或交互原型，确定页面布局、元素样式和动态效果。</li></ul></li><li><p><strong>UI框架搭建与静态渲染</strong></p><ul><li><strong>次级任务</strong>：基于设计稿构建基础UI框架，采用HTML/CSS/JS等技术实现静态页面布局。此时并不涉及动态数据，而是先确保页面的基本结构和样式正确无误。</li></ul></li><li><p><strong>数据结构设计</strong></p><ul><li><strong>并行考虑</strong>：根据项目需求，设计和规划前后端接口所需的数据结构，并预定义前端需要处理的数据模型。例如，在React应用中可能需要创建Redux状态树，Vue应用中设计Vuex的状态管理结构等。</li></ul></li><li><p><strong>API接口设计与对接</strong></p><ul><li><strong>重要阶段</strong>：与后端团队协作，制定API接口规范，完成前后端接口联调。此阶段前端通常会编写Mock数据以支持独立于后端的开发。</li></ul></li><li><p><strong>数据流转与状态管理</strong></p><ul><li><strong>核心工作</strong>：实现数据从服务器到前端组件的流转，设置合适的状态管理机制，确保数据能够在页面间传递和更新时保持一致性和效率。同时考虑数据缓存策略和优化加载性能。</li></ul></li><li><p><strong>JavaScript逻辑编写</strong></p><ul><li><strong>详细实施</strong>：编写组件级别的JavaScript逻辑，处理用户交互、表单验证、数据变换、动画效果等。遵循模块化、可复用的原则，确保代码的清晰度和可维护性。</li></ul></li><li><p><strong>错误处理与异常边界</strong></p><ul><li><strong>不可或缺</strong>：在整个过程中及早考虑并实现错误处理机制，如网络请求失败、数据解析异常、用户操作异常等情况下的提示与反馈。</li></ul></li><li><p><strong>性能优化</strong></p><ul><li><strong>后期调整</strong>：在基本功能完成后，对项目进行性能优化，比如减少不必要的DOM操作、懒加载、资源压缩合并等，提升用户体验。</li></ul></li><li><p><strong>测试与调试</strong></p><ul><li><strong>贯穿始终</strong>：单元测试、集成测试、E2E测试都要逐步展开，确保每个功能模块稳定可靠，并通过持续集成和部署流程保证代码质量。</li></ul></li></ol><p>综上所述，尽管这些步骤并非严格线性，但在实际开发过程中，可以根据实际情况灵活调整优先级和顺序， 做到需求分析、UI构建、数据架构和逻辑处理并行推进，但总体上应遵循从静态到动态、从结构到行为、从整体到细节的渐进式开发原则。</p><h2 id="代码思路" tabindex="-1">代码思路 <a class="header-anchor" href="#代码思路" aria-label="Permalink to &quot;代码思路&quot;">​</a></h2><h3 id="后端返回的数据结构可能是多样的-前端需要对数据进行处理-以适应页面展示的需求。请给出你的最佳实践" tabindex="-1">后端返回的数据结构可能是多样的，前端需要对数据进行处理，以适应页面展示的需求。请给出你的最佳实践 <a class="header-anchor" href="#后端返回的数据结构可能是多样的-前端需要对数据进行处理-以适应页面展示的需求。请给出你的最佳实践" aria-label="Permalink to &quot;后端返回的数据结构可能是多样的，前端需要对数据进行处理，以适应页面展示的需求。请给出你的最佳实践&quot;">​</a></h3><p>在前端开发中，针对后端返回的多变数据结构进行处理以适应页面展示需求的最佳实践包括以下几个方面：</p><ol><li><p><strong>定义清晰的数据模型</strong>：</p><ul><li>在前端根据UI设计和功能需求明确所需的数据结构，并创建对应的JavaScript对象模型（或使用TypeScript等类型语言提供静态类型检查）。</li><li>这有助于前端开发者预先了解并规划如何解析、转化和使用后端返回的数据。</li></ul></li><li><p><strong>数据预处理/清洗</strong>：</p><ul><li>使用适配器模式或者单独的数据处理函数对后端返回的数据进行统一转换，确保数据格式符合前端组件的渲染要求。</li><li>对于异构数据，可以通过编写可复用的方法来提取所需字段，或者整合多个数据源。</li></ul></li><li><p><strong>状态管理</strong>：</p><ul><li>利用Redux、Vuex、React Hooks中的Context API等状态管理工具来集中处理数据。将从后端获取的数据存入全局状态树中，方便各组件按需取用。</li></ul></li><li><p><strong>异常处理</strong>：</p><ul><li>对后端接口调用结果进行错误码校验和异常处理，对于不符合预期的数据结构或缺失字段的情况，提供合理的默认值或提示用户数据加载异常。</li></ul></li><li><p><strong>懒加载与分页处理</strong>：</p><ul><li>针对大量数据，实现按需加载和分页逻辑，避免一次性加载所有数据导致性能问题，同时处理好数据合并和更新。</li></ul></li><li><p><strong>组件封装与抽象</strong>：</p><ul><li>将数据处理逻辑封装到特定的UI组件内部，使组件具有自动处理响应数据的能力，提高代码的模块化程度。</li></ul></li></ol><blockquote><p>定义前端展示的Vo实体类 处理后端返回的数据，转换为前端展示的Vo实体类 toVo 使用Vuex或Redux等状态管理工具统一管理数据 对于异常数据，提供默认值或友好提示 将数据处理逻辑封装到特定的UI组件内部</p></blockquote><p>通过以上实践，前端可以灵活地应对后端返回的不同数据结构，保持代码的整洁性和可维护性，并有效提高前端应用的响应速度和用户体验。</p><div class="tip custom-block"><p class="custom-block-title">将数据处理逻辑封装到特定的UI组件内部的优点</p><p><strong>将数据处理逻辑封装到特定的UI组件内部是一种常见的最佳实践</strong>。这样做的好处在于：</p><ol><li><p><strong>模块化和可复用性</strong>：每个组件负责自己的数据处理和渲染，使得组件更加独立，易于理解和复用。当需要在多个地方使用同一类型的数据时，只需要调用相同的组件即可。</p></li><li><p><strong>职责单一原则（Single Responsibility Principle, SRP）</strong>：遵循面向对象设计原则，每个组件专注于一项功能，即从原始数据中提取并格式化出满足自身渲染需求的数据，并展示给用户。</p></li><li><p><strong>代码组织结构清晰</strong>：数据处理逻辑与视图层紧密关联，有利于保持代码的整洁性和可读性。开发者可以直接在组件内部看到数据是如何被处理和使用的，而无需去寻找分散在项目其他位置的数据处理函数。</p></li><li><p><strong>提高响应式更新效率</strong>：React等框架提供了高效的虚拟DOM diff算法，在组件内部处理数据变化后可以立即触发视图更新，优化了用户体验。</p></li></ol><p>示例：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 假设有一个UserCard组件用于展示用户信息</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> UserCard</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> ({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">user</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 在组件内部进行数据处理</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> formattedDate</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> format</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">createdAt</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;yyyy-MM-dd&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">avatarUrl</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> alt</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;Avatar&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">h2</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">h2</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">注册日期: </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">formattedDate</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 后端返回的数据可能是这样的</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> userDataFromBackend</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	id</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	name</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;John Doe&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	avatarUrl</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;/avatars/john-doe.jpg&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	createdAt</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;2022-01-01T00:00:00Z&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// ISO 8601格式的时间戳</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用组件时，只需传递原始数据</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">UserCard</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> user</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">userDataFromBackend</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>在这个例子中，<code>UserCard</code> 组件内部对 <code>createdAt</code> 字段进行了格式化处理，确保了它能够以适合页面展示的方式呈现。 通过这种方式，数据处理逻辑和UI渲染紧密结合在一起，提高了代码的整体质量和维护性。</p></div><h3 id="关于表单回显和数据绑定-你有什么最佳实践" tabindex="-1">关于表单回显和数据绑定，你有什么最佳实践？ <a class="header-anchor" href="#关于表单回显和数据绑定-你有什么最佳实践" aria-label="Permalink to &quot;关于表单回显和数据绑定，你有什么最佳实践？&quot;">​</a></h3><p>关于表单回显和数据绑定的最佳实践，可以遵循以下几点：</p><ol><li><p><strong>双向数据绑定</strong>：</p><ul><li>使用现代前端框架（如Vue、React或Angular）提供的双向数据绑定功能。例如，在Vue中使用<code>v-model</code> 指令实现输入控件与组件状态的自动同步；在React中，可以通过<code>useState</code> hook或者第三方库如<code>react-hook-form</code> 来处理表单状态并与视图进行绑定。</li></ul></li><li><p><strong>初始化表单数据</strong>：</p><ul><li>当页面加载时，从后端API获取数据后应立即初始化表单字段。确保这些值正确反映到对应的表单控件上，以实现回显效果。</li></ul></li><li><p><strong>响应式更新</strong>：</p><ul><li>保持数据模型与UI之间的实时同步，当数据发生变化时，表单应当能够自动更新显示内容，反之亦然。</li></ul></li><li><p><strong>验证与错误提示</strong>：</p><ul><li>在数据回显的同时，也要考虑表单验证逻辑，确保回显的数据符合业务规则。若初始数据不符合校验条件，应在回显的同时显示相应的错误信息。</li></ul></li><li><p><strong>异步数据处理</strong>：</p><ul><li>对于异步获取的数据，可以在数据请求完成后再进行回显，避免因数据未准备好而导致的界面闪烁或不一致。</li></ul></li><li><p><strong>分层结构处理</strong>：</p><ul><li>如果表单中有嵌套结构的数据，应适当处理数据层次关系，通过合适的属性名或对象结构映射到表单控件上。</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>对于大型表单或者大量数据回显的情况，可采用懒加载、虚拟滚动等技术提高性能，只对当前视窗内的表单元素进行渲染和数据绑定。</li></ul></li><li><p><strong>清晰分离关注点</strong>：</p><ul><li>将<strong>数据获取</strong>、<strong>数据转换</strong>（如果需要）、<strong>数据绑定</strong>(赋初始值)以及表单验证、提交逻辑明确地分离在不同的函数或组件中，保证代码的可读性和可维护性。</li></ul></li><li><p><strong>事件驱动更新</strong>：</p><ul><li>对于有关联的表单项，利用onChange、onBlur等事件监听用户交互，并实时更新数据模型，从而触发视图更新。</li></ul></li><li><p><strong>自定义控件兼容性</strong>：</p><ul><li>如果使用了自定义的表单控件，确保它们支持数据绑定，并且在回显数据时能正确展示。</li></ul></li></ol><p>综上所述，最佳实践不仅包括合理利用框架特性进行高效的数据绑定，还包括对用户体验、性能、可维护性的综合考量。</p><blockquote><p>数据获取 - 存储到状态管理或者逐层传递给子组件 - 转为Vo作为初始值 - 绑定到表单控件 - 响应式更新 - 表单验证 - 数据转为Dto - 提交逻辑</p></blockquote><h2 id="如果表单中有嵌套结构的数据-应如何处理数据层次关系" tabindex="-1">如果表单中有嵌套结构的数据，应如何处理数据层次关系 <a class="header-anchor" href="#如果表单中有嵌套结构的数据-应如何处理数据层次关系" aria-label="Permalink to &quot;如果表单中有嵌套结构的数据，应如何处理数据层次关系&quot;">​</a></h2><p>在表单中有嵌套结构的数据时，处理数据层次关系通常需要遵循以下步骤：</p><ol><li><p><strong>数据模型设计</strong>：</p><ul><li>根据后端返回的数据结构以及前端展示的需求，设计一个适应于UI渲染和用户交互的前端数据模型。这个模型可能包含对象、数组或其他嵌套结构。</li></ul></li><li><p><strong>状态管理</strong>：</p><ul><li>使用React的状态管理工具如<code>useState</code>、<code>useReducer</code>或第三方库如Redux、MobX、Zustand等来存储和管理这些嵌套结构的数据。确保能够方便地访问和更新各个层级的数据。</li></ul></li><li><p><strong>递归组件或遍历数据</strong>：</p><ul><li><p>对于复杂的嵌套结构，可以创建递归组件来动态生成对应的表单元素。例如，在React中，可以编写一个递归函数组件，该组件能根据数据深度和结构自动生成子表单和控件。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> RecursiveForm</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">			{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(([</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">				// 处理基本类型值</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">				typeof</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;string&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> typeof</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;number&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> ?</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">					&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> /&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> :</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">				// 处理对象类型值（继续递归）</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">					&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">RecursiveForm</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> data</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">			))</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul></li><li><p><strong>v-model或者onChange绑定</strong>：</p><ul><li>如果使用Vue，可以利用<code>v-model</code>指令对嵌套对象进行双向数据绑定；在React中，可以通过<code>useState</code> hook或者其他状态管理方式监听每个表单控件的更改事件，并更新相应层级的数据。</li></ul></li><li><p><strong>表单验证</strong>：</p><ul><li>针对嵌套结构的数据，验证逻辑也需要处理不同层级的数据校验规则。可以为每个层级定义独立的验证方法，并在数据发生变化时触发验证。</li></ul></li><li><p><strong>数据提交前的预处理</strong>：</p><ul><li>在表单提交之前，将已修改过的嵌套数据扁平化处理，转换成符合后端接口要求的格式，以便发送到服务器保存。</li></ul></li><li><p><strong>优化性能与用户体验</strong>：</p><ul><li>对于大型嵌套表单，考虑只渲染当前视窗内的表单部分，避免一次性加载大量数据导致性能下降。同时，提供清晰的界面导航以帮助用户理解和操作复杂的表单结构。</li></ul></li></ol><p>通过以上策略，您可以有效地管理和显示具有嵌套结构的表单数据，并确保用户能够流畅地完成数据编辑和提交过程。</p><h3 id="后端返回的以及需要传递给后端的-都是嵌套数据结构-为啥-在表单提交之前-将已修改过的嵌套数据扁平化处理" tabindex="-1">后端返回的以及需要传递给后端的，都是嵌套数据结构，为啥 在表单提交之前，将已修改过的嵌套数据扁平化处理 <a class="header-anchor" href="#后端返回的以及需要传递给后端的-都是嵌套数据结构-为啥-在表单提交之前-将已修改过的嵌套数据扁平化处理" aria-label="Permalink to &quot;后端返回的以及需要传递给后端的，都是嵌套数据结构，为啥 在表单提交之前，将已修改过的嵌套数据扁平化处理&quot;">​</a></h3><p>后端返回的以及需要传递给后端的嵌套数据结构在表单提交之前进行扁平化处理，主要有以下几个原因：</p><ol><li><p><strong>接口约定</strong>：</p><ul><li>有时，后端接口可能要求以扁平化的键值对形式接收数据，而不是复杂的嵌套对象或数组。扁平化能够确保提交的数据格式与接口规范一致。</li></ul></li><li><p><strong>简化验证和错误处理</strong>：</p><ul><li>扁平化数据更容易进行统一和标准化的验证。每个字段可以单独验证，而不必处理不同层级的嵌套关系，这有助于减少验证逻辑的复杂性。</li></ul></li><li><p><strong>减少传输数据量</strong>：</p><ul><li>尽管对于JSON格式而言，嵌套并不会显著增加传输大小，但在某些情况下，特别是当有大量重复或冗余键时，扁平化可以通过将共用属性提升到顶层来减少数据量。</li></ul></li><li><p><strong>易于数据库操作</strong>：</p><ul><li>对于一些数据库设计，尤其是那些不支持嵌套结构（如NoSQL数据库）或者设计上倾向于使用关联表来表示关系的传统SQL数据库，扁平化的数据更便于插入、更新和查询。</li></ul></li><li><p><strong>前端状态管理</strong>：</p><ul><li>在前端应用中，特别是在状态管理较为复杂的情况下，扁平化数据可以简化状态树，使得状态变更检测更加高效，并且方便地利用现有的工具库实现双向绑定或状态变化监听。</li></ul></li><li><p><strong>防止深层嵌套带来的问题</strong>：</p><ul><li>深度嵌套的对象可能导致序列化和反序列化过程中出现问题，尤其是在处理不同语言或框架之间交互时。扁平化可以降低这类问题的风险。</li></ul></li></ol><p>尽管如此，是否需要扁平化取决于具体的应用场景和架构设计。在现代前后端开发中，通常能很好地处理嵌套数据，不一定非得扁平化；而在特定条件下，扁平化处理则能带来实际的好处。</p><h3 id="比如组件嵌套的场景-表单校验是放在各个子组件自己维护还是在父组件中点击保存的时候如何校验" tabindex="-1">比如组件嵌套的场景，表单校验是放在各个子组件自己维护还是在父组件中点击保存的时候如何校验？ <a class="header-anchor" href="#比如组件嵌套的场景-表单校验是放在各个子组件自己维护还是在父组件中点击保存的时候如何校验" aria-label="Permalink to &quot;比如组件嵌套的场景，表单校验是放在各个子组件自己维护还是在父组件中点击保存的时候如何校验？&quot;">​</a></h3><p>在组件嵌套的场景中，表单校验可以在子组件内部自行维护，也可以在父组件中集中处理。这两种方式各有优缺点，可以根据项目的具体需求和复杂度来选择合适的方法。</p><h3 id="子组件自身维护校验" tabindex="-1">子组件自身维护校验： <a class="header-anchor" href="#子组件自身维护校验" aria-label="Permalink to &quot;子组件自身维护校验：&quot;">​</a></h3><ul><li><p><strong>优点</strong>：</p><ul><li>每个子组件独立性更强，易于理解和复用。</li><li>可以实现局部即时校验，用户输入时实时反馈错误信息，提升用户体验。</li><li>遵循“单一职责原则”，每个组件只负责自己相关的数据验证。</li></ul></li><li><p><strong>实现方法</strong>：</p><ul><li>使用如<code>react-hook-form</code>、<code>Formik</code>等第三方库中的<code>useForm</code>或<code>withFormik</code>等高阶组件进行本地表单字段的注册与验证。</li><li>在子组件内部使用状态（如<code>useState</code>）或上下文API管理验证状态，并通过事件监听更新验证结果。</li></ul></li></ul><h3 id="父组件集中校验" tabindex="-1">父组件集中校验： <a class="header-anchor" href="#父组件集中校验" aria-label="Permalink to &quot;父组件集中校验：&quot;">​</a></h3><ul><li><p><strong>优点</strong>：</p><ul><li>能够统一控制整个表单的数据流和验证逻辑，避免分散导致的问题。</li><li>更容易处理复杂的跨字段校验，比如依赖于多个子组件之间关联关系的校验规则。</li><li>提交时一次性完成所有校验，确保整体数据的一致性和完整性。</li></ul></li><li><p><strong>实现方法</strong>：</p><ul><li>父组件可以通过props向下传递回调函数给子组件，子组件在需要时调用这些回调函数报告其内部的验证结果。</li><li>或者使用Context API或者Redux等集中式状态管理工具，在父组件中收集所有子组件的状态，然后在提交时进行全局校验。</li></ul></li></ul><p>实际开发中，通常会结合两种方式：</p><ol><li><strong>局部即时校验</strong>：子组件内实现基本的、独立的表单字段校验，提供良好的实时交互体验。</li><li><strong>全局提交校验</strong>：父组件在点击保存按钮触发提交操作时，再次进行全局性的数据一致性检查和补充校验。</li></ol><p>这样既保证了用户体验，又确保了数据的有效性和完整性。</p><h2 id="对于下拉框的数据获取-需要单独拆分出一个hooks吗" tabindex="-1">对于下拉框的数据获取，需要单独拆分出一个hooks吗 <a class="header-anchor" href="#对于下拉框的数据获取-需要单独拆分出一个hooks吗" aria-label="Permalink to &quot;对于下拉框的数据获取，需要单独拆分出一个hooks吗&quot;">​</a></h2><p>对于下拉框的数据获取，是否需要单独拆分出一个hook取决于项目的具体需求和代码组织结构。以下是一些考虑因素：</p><ol><li><p><strong>复用性</strong>：</p><ul><li>如果项目中多个地方都需要从同一个API或者同一个数据源获取下拉框选项数据，并且处理逻辑相同，那么创建一个专门的hooks用于获取并处理下拉框数据是合理的。这样可以避免代码重复，提高代码可读性和维护性。</li></ul></li><li><h2 id="异步加载与缓存" tabindex="-1"><strong>异步加载与缓存</strong>： <a class="header-anchor" href="#异步加载与缓存" aria-label="Permalink to &quot;**异步加载与缓存**：&quot;">​</a></h2><p>如果下拉框数据是从后端异步获取，并且可能频繁请求，那么将数据获取封装成一个hook，内部包含异步请求、错误处理、以及缓存机制（如使用<code>useMemo</code> 或<code>useRef</code>来存储已获取过的数据），有助于优化性能和用户体验。</p></li><li><p><strong>业务逻辑复杂度</strong>：</p><ul><li>如果获取下拉框数据涉及复杂的业务逻辑，比如需要根据其他状态变量动态查询不同的数据源，或者数据转换过程比较复杂，那么封装成一个独立的hook可以让这部分逻辑更易于管理。</li></ul></li></ol><p>示例代码（基于React Hooks）：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">useState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">useEffect</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;react&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 假设有个API接口返回下拉框选项列表</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> fetchOptions</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> axios</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;/api/options&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useDropdownOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">setOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">([]);</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">loading</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">setLoading</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">error</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">setError</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	useEffect</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">		let</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> didCancel</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">		async</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> fetchData</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">			try</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">				setLoading</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">				const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> fetchOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">				if</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">didCancel</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">					setOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">					setLoading</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">				}</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">			} </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">				if</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">didCancel</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">					setError</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">					setLoading</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">				}</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">			}</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">		fetchData</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 清理函数，防止组件卸载时仍有网络请求</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">			didCancel</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">		};</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	}, []); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 空依赖数组确保只在组件挂载时执行一次</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">loading</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用该hook</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> DropdownComponent</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">loading</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">error</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useDropdownOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 根据loading和error状态展示合适的UI</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 并将options传递给下拉框组件进行渲染</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">			{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">loading</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">option</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">Loading...</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">option</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">			{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">option</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">Error fetching data</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">option</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">			{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">option</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">				&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">option</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">option</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">option</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">					{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">option</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">label</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">				&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">option</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">			))</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>总之，在合适的情况下，为下拉框数据获取创建一个自定义hook可以帮助提升代码的模块化程度，简化数据处理流程，并便于后期维护和扩展。</p><h2 id="如果需要在初始化渲染第一次获取到下拉框数据的时候-下拉框获取到值后-更新某个表单项的字段或者进行计算-展示计算后的结果-如何封装hooks" tabindex="-1">如果需要在初始化渲染第一次获取到下拉框数据的时候，下拉框获取到值后，更新某个表单项的字段或者进行计算，展示计算后的结果，如何封装hooks <a class="header-anchor" href="#如果需要在初始化渲染第一次获取到下拉框数据的时候-下拉框获取到值后-更新某个表单项的字段或者进行计算-展示计算后的结果-如何封装hooks" aria-label="Permalink to &quot;如果需要在初始化渲染第一次获取到下拉框数据的时候，下拉框获取到值后，更新某个表单项的字段或者进行计算，展示计算后的结果，如何封装hooks&quot;">​</a></h2><p>实际上，即使在初始化渲染时需要处理获取到的下拉框数据，并执行特定逻辑（如更新表单项或进行计算），依然可以将获取下拉框数据的部分抽成一个hook。关键在于如何设计和使用这个hook。</p><p>以下是一个例子：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个自定义hook来获取下拉框数据</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useDropdownOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">initialSelectedValue</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">setOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">([]);</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">selectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">setSelectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">initialSelectedValue</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	useEffect</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">		async</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> fetchOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">			const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> fetchedOptions</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> getDropdownOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">			setOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">fetchedOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			// 如果有默认选项需要选中，在这里设置</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">			if</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">fetchedOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">initialSelectedValue</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">				setSelectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">fetchedOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#098658;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 假设第一个是默认值</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">			}</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">		fetchOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	}, []); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 空依赖数组确保只在挂载时执行一次</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 返回用于处理选择事件的方法以及当前选中的选项值</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">handleSelectChange</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">selectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 在组件内部使用该hook</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> DropdownComponent</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 使用自定义hook获取下拉框数据并传递初始值</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">handleSelectChange</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;">selectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> useDropdownOptions</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 获取下拉框数据后立即执行的逻辑</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	useEffect</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">		performCalculation</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">selectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">		updateFormField</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">selectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	}, [</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">selectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]); </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 当selectedOption改变时重新执行此effect</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 处理选项变化的事件</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	const</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> handleSelection</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">		handleSelectChange</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">target</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">selectedOption</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> onChange</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">handleSelection</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">			{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">option</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">				&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">option</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">option</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">option</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">					{</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;">option</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">label</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">				&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">option</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">			))</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 下拉框选项改变后的操作函数</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> performCalculation</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">selectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 根据selectedOption进行计算...</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 更新表单字段的函数</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> updateFormField</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">selectedOption</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 更新表单字段...</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>这样，我们仍然可以在<code>useDropdownOptions</code> hook 中获取并设置下拉框选项，同时在组件内部通过另一个<code>useEffect</code> 监听<code>selectedOption</code>的变化以执行相应的计算和更新操作。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,46);function c(F,u,b,A,C,D){const a=t,n=h,l=p;return g(),e("div",null,[y,s(a,{readTime:"17",words:"5.6k"}),o,s(n),s(l)])}const _=k(B,[["render",c]]);export{v as __pageData,_ as default};
