import{_ as t,a as l,b as e}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as p,c as h,I as s,a7 as r,o as k}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const o="/long-press/assets/a2c9d08c.BTvjmdaD.png",d="/long-press/assets/4b55424c.CO7869ac.png",c="/long-press/assets/0386a9f6.PyEA5Vp_.png",P=JSON.parse('{"title":"组件封装规范","description":"","frontmatter":{},"headers":[],"relativePath":"standard/组件封装规范.md","filePath":"standard/组件封装规范.md","lastUpdated":1712398251000}'),g={name:"standard/组件封装规范.md"},y=r(`<h1 id="组件封装规范" tabindex="-1">组件封装规范 <a class="header-anchor" href="#组件封装规范" aria-label="Permalink to &quot;组件封装规范&quot;">​</a></h1><h2 id="组件封装原则" tabindex="-1">组件封装原则 <a class="header-anchor" href="#组件封装原则" aria-label="Permalink to &quot;组件封装原则&quot;">​</a></h2><ul><li><p><strong>不能</strong>将具体项目中的环境变量引入到组件中，保持组件的独立性</p></li><li><p>一个组件文件夹包括但不仅限于 4 类文件：<code>index.tsx</code>、<code>typing.d.tsx</code>、<code>styles.less</code>、<code>index.md</code>(一般放在\\docs\\components)</p></li><li><p><strong>样式名、类型名和组件命名一定要独立，不能重复！！！</strong></p></li><li><p>注释规则：</p><ul><li>组件的每个参数需要有注释</li><li>参数类型和函数采用 <code>jsdoc</code> 注释<code>/** */</code>，以便调用者能在调用的时候看到 API 的作用</li></ul></li><li><p>css 规则：</p><ul><li>不使用 <code>css Modules</code>，因为采用 <code>css Modules</code> 方式导入，会导致 <code>className</code> 不稳定，开发者无法覆写</li><li>采用 <code>improt &#39;\\*.less&#39;</code>或者<code>css-in-js</code>导入样式</li><li>css 类名规则 <code>lands-组件名-类名</code></li></ul></li><li><p>TS 类型规则：</p><ul><li>组件的 <code>Props</code> 命名，采用 <code>组件名Props</code>,例如：<code>ProTableEditProps</code></li><li>组件的衍生 <code>Props</code> 命名，采用 <code>组件名-变量名</code>,例如：<code>ProTableEditColumns</code></li><li>简单类型使用 type 结尾命名。例如：<code>export type stringNumberType = string | number</code></li><li>复杂对象类型使用 props 结尾命名。例如：<code>export interface ProTableEditProps{ }</code> or <code>type ProFormTableProps = Record&lt;string,any&gt; &amp; { ... }</code></li><li>组件相关类型首字符全部大写，驼峰命名</li><li>局部不需要导出的类型，可自定规则。例如：组件的 Props(不导出)，可使用 <code>interface IProps{}</code> 定义</li></ul></li></ul><h2 id="透传-classname、style" tabindex="-1">透传 className、style <a class="header-anchor" href="#透传-classname、style" aria-label="Permalink to &quot;透传 className、style&quot;">​</a></h2><p>我们可以给组件设置 className 和 style：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;./App.css&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;antd&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> App</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> className</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;App&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Button</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> className</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;aaa bbb&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> style</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">				width</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;100px&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">				height</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;50px&#39;</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#ABB2BF;">			}</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#E50000;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;primary&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">测试</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Button</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#800000;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> App</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这种功能的实现就是透传 className 和 style 的 props。</p><p>基本 antd 所有的组件都会做这个。</p><p>比如 VisualList 组件的源码： <img src="`+o+'" alt=""> 它取了传入的 className、style 的 props，还有剩余的所有 props。</p><p>对 className 做了一些处理，添加了两个 className：</p><p><img src="'+d+'" alt=""> 对 style 也做了扩展，添加了个 position: relative 的样式。 <img src="'+c+'" alt=""></p><p>然后把 style、className，额外的 props 都设置给最外层的 div。</p><p>这样，使用这个组件的时候，就可以自己定义一些样式，设置一些 props。</p><p>其中，classnames 是用来动态产生 className 的一个包，用起来很简单。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>',15);function B(m,u,b,_,A,F){const i=t,a=l,n=e;return k(),h("div",null,[y,s(i,{readTime:"1",words:"552"}),s(a),s(n)])}const E=p(g,[["render",B]]);export{P as __pageData,E as default};
