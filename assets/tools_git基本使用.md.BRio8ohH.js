import{_ as t,a as n,b as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as r,c as p,I as a,a7 as o,o as c}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const h="/long-press/assets/a0d0bcb4.DzajYO9-.png",q=JSON.parse('{"title":"git基本使用","description":"","frontmatter":{},"headers":[],"relativePath":"tools/git基本使用.md","filePath":"tools/git基本使用.md","lastUpdated":1715494022000}'),d={name:"tools/git基本使用.md"},g=o(`<h1 id="git基本使用" tabindex="-1">git基本使用 <a class="header-anchor" href="#git基本使用" aria-label="Permalink to &quot;git基本使用&quot;">​</a></h1><h2 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>git config --global user.name xxx</span></span>
<span class="line"><span>git config --global user.email xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="基本命令" tabindex="-1">基本命令 <a class="header-anchor" href="#基本命令" aria-label="Permalink to &quot;基本命令&quot;">​</a></h2><p>git checkout -b xxx ： 创建分支并切换到分支xxx git status ： 查看当前分支状态 git add . : 将新添加的文件加入暂存区 git commit -am “注释” ：添加并提交所有修改文件 git merge xxx : 将xxx(本地)分支的代码合并到当前分支 git pull : 从远端获取, 或git pull origin xxx(分支名) git push : 更新到远端, 或git push origin xxx(分支名) git add filename : 添加未跟踪的文件到暂存区 git add . : 添加所有未跟踪的文件到暂存区 git log : 日志</p><h2 id="使用合并流程" tabindex="-1">使用合并流程 <a class="header-anchor" href="#使用合并流程" aria-label="Permalink to &quot;使用合并流程&quot;">​</a></h2><p>[master下]创建分支: git checkout -b xxx [分支下] 开发代码并不断commit, 开发完毕 [分支下] 切换到master: git checkout master [master下] 更新代码: git pull [master下] 切换到分支xxx: git checkout xxx [分支下] 合并master到分支： git merge master [分支下] 切换master: git checkout master [master下] 合并分支xxx到master: git merge xxx [master下] 更新到远端 git push</p><h2 id="分支命名" tabindex="-1">分支命名 <a class="header-anchor" href="#分支命名" aria-label="Permalink to &quot;分支命名&quot;">​</a></h2><p>建议采用git-flow规范：</p><p>新项目，新功能： feature/xxx 快速更改，修复bug: hotfix/xxx</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>windows下客户端: sourcetree(注册需翻墙), tortoiseGit, mac下客户端: sourcetree, tower master分支尽量不要进行耗时项目开发，远端master要保持随时可以上线版本 push之前要先pull 所有命令操作都在根目录下执行。 不建议单文件commit， 每次commit都是提交当前所有的修改</p><h2 id="alias-别名" tabindex="-1">alias 别名 <a class="header-anchor" href="#alias-别名" aria-label="Permalink to &quot;alias 别名&quot;">​</a></h2><p>使用命令行的同学可以在git bash里 vi ~/.gitconfig, 将下面别名加入文件末尾:</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>[alias]</span></span>
<span class="line"><span>     cm = commit</span></span>
<span class="line"><span>     co = checkout</span></span>
<span class="line"><span>     ac = !git add -A &amp;&amp; git commit</span></span>
<span class="line"><span>     st = status -sb</span></span>
<span class="line"><span>     tags = tag -l</span></span>
<span class="line"><span>     branches = branch -a</span></span>
<span class="line"><span>     cleanup = git config --global alias.cleanup &quot;git branch --merged | grep -v &#39;*&#39; | xargs git branch -d&quot;</span></span>
<span class="line"><span>     remotes = remote -v</span></span>
<span class="line"><span>     lg = log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="git-tag" tabindex="-1">Git Tag <a class="header-anchor" href="#git-tag" aria-label="Permalink to &quot;Git Tag&quot;">​</a></h2><p>git tag -a v1.2.0 -m &quot;此处为注解信息version: 1.2.0&quot; git push origin v1.2.0 git push origin --tags</p><h2 id="remote-error-file-×××-exceeds-100-00-mb-⋯-cdots⋯-remote-please-remove-the-file-from-history-and-try-again" tabindex="-1">remote：error：File：××× exceeds 100.00 MB. ⋯\\cdots⋯ remote：Please remove the file from history and try again. <a class="header-anchor" href="#remote-error-file-×××-exceeds-100-00-mb-⋯-cdots⋯-remote-please-remove-the-file-from-history-and-try-again" aria-label="Permalink to &quot;remote：error：File：××× exceeds 100.00 MB. ⋯\\cdots⋯ remote：Please remove the file from history and try again.&quot;">​</a></h2><p>问题：上传文件超出远程仓库的限制 解决： 方案一：撤销上一次 commit，会退到上一次 commit 前的状态，然后移除超出限制的文件，重新上传。 git reset HEAD^ # 撤销上一次 commit 【注意事项】 若不小心错误回退到上次版本，需要撤销 reset 操作，则可以使用以下代码查看 git HEAD 变化的历史记录。 git reflog 然后使用 git reset 回退到的历史记录： git reset XXX # XXX 为想要会退到的历史记录的 HEAD 当然，这种方法也能解决上传文件超出远程仓库的限制而导致的上传失败问题。</p><p>使用webstorm的话，直接点击删除提交即可</p><p>方案二：删除大文件的提交记录。 首先根据报错提示的记录 id（此处以 c95128eee48b004a21ff94a3268615141e157e3c 为例）查询该大文件的路径：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> rev-list</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --objects</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --all</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> c95128eee48b004a21ff94a3268615141e157e3c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>得到该大文件路径为 data/data.mp4 。</p><p>然后将该文件从历史记录中删除：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --pretty=oneline</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --branches</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> modules/electron-v30.0.0-win32-x64.zip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>最后重写所有的提交：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> filter-branch</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --index-filter</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;git rm --cached --ignore-unmatch modules/electron-v30.0.0-win32-x64.zip&#39;</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+h+`" alt=""></p><h2 id="fatal-unable-to-checkout-working-tree-warning-clone-succeeded-but-checkout-failed" tabindex="-1">fatal: unable to checkout working tree. warning: Clone succeeded, but checkout failed. <a class="header-anchor" href="#fatal-unable-to-checkout-working-tree-warning-clone-succeeded-but-checkout-failed" aria-label="Permalink to &quot;fatal: unable to checkout working tree. warning: Clone succeeded, but checkout failed.&quot;">​</a></h2><p>问题：成功 Clone，但是目录下的文件并没有恢复，原因在于目录中存在文件名不符合规范的文件。 解决：对于由于长文件名导致的问题，可以修改 git 配置：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --system</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> core.longpaths</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> core.longpaths</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>对于由于文件名中存在非法字符，需要修改远程仓库的文件名后在重新 pull 一下。</p><p>【注】windows 下的文件名要求：文件名、文件夹名不能包括的符号 <code>\\、/、:、*、?、&quot;、&lt;、&gt;、|</code> 。</p><h2 id="fatal-unable-to-access-xxx-server-certificate-verification-failed-cafile-etc-ssl-certs-ca-certificates-crt-crlfile-none" tabindex="-1">fatal: unable to access &#39;xxx&#39;: server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none <a class="header-anchor" href="#fatal-unable-to-access-xxx-server-certificate-verification-failed-cafile-etc-ssl-certs-ca-certificates-crt-crlfile-none" aria-label="Permalink to &quot;fatal: unable to access &#39;xxx&#39;: server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none&quot;">​</a></h2><p>问题：仓库网站证书有问题，无法通过验证。 比如最近 2021 年 9 月 30 日，Let’s Encrypt 组织使用的 IdentTrust DST Root CA X3 根证书过期，因此很多使用了 Let’s Encrypt 签发的证书但没有及时更新证书的网站都受到了影响。</p><p>解决：在 git clone 时不启用证书验证：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">GIT_SSL_NO_VERIFY</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;"> git</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="git-生成-key-密钥" tabindex="-1">Git 生成 key 密钥 <a class="header-anchor" href="#git-生成-key-密钥" aria-label="Permalink to &quot;Git  生成 key 密钥&quot;">​</a></h2><p>1.设置用户名</p><p>git config --global user.name &#39;longmo&#39;</p><p>2.设置用户名邮箱</p><p>git config --global user.email &#39;3131521901@qq.com&#39;</p><p>3.查看设置</p><p>git config --list</p><p>4.生产publickey 连续三次回车即可</p><p>ssh-keygen -t rsa -C &quot;<a href="mailto:3131521901@qq.com" target="_blank" rel="noreferrer">3131521901@qq.com</a>&quot;</p><p>ssh-keygen -t ssh-ed25519 -C &quot;<a href="mailto:3131521901@qq.com" target="_blank" rel="noreferrer">3131521901@qq.com</a>&quot;</p><p>问题：</p><ol><li>Disconnected: No supported authentication methods available(server sent: publickey) 的解决办法</li></ol><p>解决：</p><p><a href="https://blog.csdn.net/Hello_World_QWP/article/details/82216345" target="_blank" rel="noreferrer">https://blog.csdn.net/Hello_World_QWP/article/details/82216345</a></p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,52);function u(m,k,b,f,x,v){const e=t,s=n,i=l;return c(),p("div",null,[g,a(e,{readTime:"4",words:"1.2k"}),a(s),a(i)])}const A=r(d,[["render",u]]);export{q as __pageData,A as default};
