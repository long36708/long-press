import{_ as e,a as i,b as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as t,c as r,I as s,a7 as o,o as h}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const x=JSON.parse('{"title":"多包项目","description":"","frontmatter":{},"headers":[],"relativePath":"tools/pnpm多包项目.md","filePath":"tools/pnpm多包项目.md","lastUpdated":1715180704000}'),c={name:"tools/pnpm多包项目.md"},d=o(`<h1 id="多包项目" tabindex="-1">多包项目 <a class="header-anchor" href="#多包项目" aria-label="Permalink to &quot;多包项目&quot;">​</a></h1><p><a href="https://juejin.cn/post/7165688786532171784#heading-0" target="_blank" rel="noreferrer">说实话，不得不用 pnpm 的原因，还得是电脑内存不够用</a></p><h2 id="什么是-monorepo" tabindex="-1">什么是 Monorepo <a class="header-anchor" href="#什么是-monorepo" aria-label="Permalink to &quot;什么是 Monorepo&quot;">​</a></h2><p>Monorepo 项目简称多包项目，一个包含多个子项目的仓库。</p><p>那为什么要放多个项目在一个仓库下呢？</p><p>是因为这些项目互相引用，相互依赖，放在一个仓库下方便管理及依赖。</p><p>所以管理一个多包项目的关键，需要实现以下 2 点：</p><ul><li>能够很方便的管理包与包之间的依赖关系</li><li>能够在发布其中一个包时，自动更新依赖了该包的其他包并发布</li></ul><h2 id="什么是-lerna" tabindex="-1">什么是 lerna <a class="header-anchor" href="#什么是-lerna" aria-label="Permalink to &quot;什么是 lerna&quot;">​</a></h2><p>使用最广泛成熟的 Monorepe 项目管理方案就是 lerna + yarn。</p><p>lerna 是一个优化使用 git 和 npm 管理多包存储库工作流的工具。</p><p>它具有以下功能：</p><ul><li>自动解决 packages 之间的依赖关系；</li><li>通过 git 检测文件改动，自动发布；</li><li>根据 git 提交记录，自动生成 CHANGELOG。</li></ul><p>更多详细的 lerna 介绍可以见我的另外一篇博客：<a href="https://juejin.cn/post/7136925215388499998" target="_blank" rel="noreferrer">最详细的 lerna 中文手册</a>。</p><p>既然 lerna 这么好用也这么熟悉了，那为什么还要切换到 pnpm 呢？</p><p>有以下几个原因：</p><ul><li>pnpm 内置了管理 monorepo 功能，使用起来比 lerna 简单</li><li>pnpm 安装比 yarn 高效，也节省电脑内存</li></ul><h2 id="什么是-pnpm" tabindex="-1">什么是 pnpm <a class="header-anchor" href="#什么是-pnpm" aria-label="Permalink to &quot;什么是 pnpm&quot;">​</a></h2><p>pnpm 介绍可以查看 pnpm 官网。</p><p>pnpm 是新一代的包管理工具，相较于 npm 和 yarn，有以下 2 个优点：</p><p>节约磁盘空间并提升安装速度</p><ul><li><p>节约磁盘空间： pnpm 安装依赖时，依赖会被存储在硬盘中，不同项目的同一依赖都会硬链接到硬盘位置，不会额外占用磁盘空间。 同一依赖包的不同版本，也只会将不同版本中有差异的文件添加到仓库中，不会下载整个包占用磁盘空间。</p></li><li><p>提升安装速度： 安装依赖时，会先去硬盘位置寻找包，如果能找到，则建立硬链接，比起重新下载包或者从缓存中拷贝移动包，速度快了很多 创建非扁平化的 node_modules 文件夹 npm、yarn 为了解决同一依赖被安装多次的问题，将所有包都被提升到模块目录的根目录。 但是当依赖包有多个版本的时候，只会提升一个，其余版本的包依然会被安装多次。 另外扁平化 node_modules 时，项目可以访问到未被添加进当前项目的依赖，这样是有隐患的， 因为没有显式依赖，万一有一天别的包不依赖这个包了，代码就不能跑了，因为你依赖这个包，但是现在不会被安装了。</p></li></ul><p>pnpm 采用磁盘硬链接连接依赖，已经解决了依赖会被安装多次的问题。</p><p>为了避免幽灵依赖，pnpm 选择创建非扁平化的 node_modules，项目无法访问到未被添加进当前项目的依赖。</p><h3 id="为什么使用-pnpm-pnpm-的特性和优势" tabindex="-1">为什么使用 pnpm？ pnpm 的特性和优势？ <a class="header-anchor" href="#为什么使用-pnpm-pnpm-的特性和优势" aria-label="Permalink to &quot;为什么使用 pnpm？ pnpm 的特性和优势？&quot;">​</a></h3><ol><li>快速高效、节省磁盘空间 pnpm 是同类工具速度的将近 2 倍 node_modules 中的所有文件均克隆或硬链接自单一存储位置 如果使用 npm 或 yarn，如果 100 个项目同时用到同一个依赖包时，就需要在硬盘上拷贝 100 份。而使用 pnpm 时，所有依赖包都保存在硬盘的统一位置（.pnpm-store），不同项目之间共享依赖包。</li></ol><p>如果这些项目使用的同一依赖包是不同的版本，那么只有不同的文件会被再次保存起来。 直接依赖通过符号链接的方式添加在 node_modules 根目录下。实际指向的地址是：<code>.pnpm/&lt;name&gt;@&lt;version&gt; /node_modules/&lt;name&gt;@&lt;version&gt;</code> 该地址会硬链接到 .pnpm-store 直接依赖中的间接依赖通过软链接到 node_modules/.pnpm目录下，具体应该是 <code>node_modules/.pnpm/&lt;name&gt;@&lt;version&gt; /node_modules/name@&lt;version&gt;</code>，然后硬链接到 .pnpm-store</p><ol start="2"><li><p>支持 monorepo pnpm 跟 npm 和 Yarn 一样，内置了对 单一存储库monorepo 的支持，只需要在项目根目录下创建 pnpm-workspace.yaml 文件，定义 workspace 的根目录。</p></li><li><p>权限严格、更加安全 使用 pnpm 创建的 node_modules 默认是非扁平结构，可以防止幽灵依赖。</p></li></ol><h3 id="pnpm-常用命令" tabindex="-1">pnpm 常用命令 <a class="header-anchor" href="#pnpm-常用命令" aria-label="Permalink to &quot;pnpm 常用命令&quot;">​</a></h3><h4 id="pnpm-list" tabindex="-1">pnpm list <a class="header-anchor" href="#pnpm-list" aria-label="Permalink to &quot;pnpm list&quot;">​</a></h4><p>别名 ls。作用：该命令将以树形结构输出所有已安装软件包的版本及其依赖包。</p><p>--global, -g：列出全局安装目录中的软件包，而不是当前项目中的软件包。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 查看全局安装的软件包</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="pnpm-link" tabindex="-1">pnpm link <a class="header-anchor" href="#pnpm-link" aria-label="Permalink to &quot;pnpm link&quot;">​</a></h4><p>别名 ln。作用：让当前目录下的软件包在系统范围内或其它位置都可访问。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> link</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">di</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">r&gt; </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 直接连接对应包的目录</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> link</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 待发布的软件包中执行</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> link</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">pk</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">g&gt; </span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 将待发布的软件包软连接到项目中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">断开连接</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> unlink</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> 与</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> link</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> 对应。</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> link</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">packag</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">与</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> uninstall</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">packag</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">对应。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="迁移到-pnpm" tabindex="-1">迁移到 pnpm <a class="header-anchor" href="#迁移到-pnpm" aria-label="Permalink to &quot;迁移到 pnpm&quot;">​</a></h3><p>安装 pnpm 需要 node 版本大于等于 16.14，执行 npm i -g pnpm</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 删除依赖包</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> -rf</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> node_modules</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 在根目录下新建 .npmrc 文件 </span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">auto-install-peers</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">true</span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # 自动安装任何缺少同级依赖关系</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">shamefully-hoist</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">false</span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # [不推荐] 将所有依赖提升至根目录，即一个扁平的目录结构类似 npm 和 yarn</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 从另一个包管理器的 lock 文件生成 pnpm-lock.yaml</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> import</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 加上 --frozen-lockfile 参数：安装依赖时不更新 pnpm-lock.yaml</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> --frozen-lockfile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 启动项目，可能需要解决下幽灵依赖带来的问题</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 修改 ci 文件配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="faq-常见问题" tabindex="-1">FAQ 常见问题 <a class="header-anchor" href="#faq-常见问题" aria-label="Permalink to &quot;FAQ 常见问题&quot;">​</a></h3><ol><li>.pnpm-store 存储资源的位置在哪？ Mac/linux 中默认会设置到 <code>{home dir}&gt;/.pnpm-store/v3</code> Windows 下会设置到当前盘的根目录下，比如 D 盘：<code>D:.pnpm-store\\v3</code></li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 执行以下命令查看 store 存储目录的路径</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> store</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> path</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>.pnpm-store 越来越大怎么办？ 可以执行 pnpm store prune，从存储中删除未引用的包。</li></ol><p>未引用的包是系统上的任何项目中都未使用的包。 运行 pnpm store prune 是无害的，对您的项目没有副作用。 如果以后的安装需要已经被删除的包，pnpm 将重新下载他们。</p><p>最好的做法是 pnpm store prune 来清理存储，但不要太频繁。 有时，未引用的包会再次被需要。 这可能在切换分支和安装旧的依赖项时发生，在这种情况下，pnpm 需要重新下载所有删除的包，会暂时减慢安装过程。</p><p>请注意，当 存储服务器 正在运行时，这个命令是被禁止的。</p><h2 id="创建-monorepo-项目" tabindex="-1">创建 Monorepo 项目 <a class="header-anchor" href="#创建-monorepo-项目" aria-label="Permalink to &quot;创建 Monorepo 项目&quot;">​</a></h2><p>创建目录结构：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>mkdir my-project</span></span>
<span class="line"><span>cd ./my-project</span></span>
<span class="line"><span>npm init -y</span></span>
<span class="line"><span>mkdir packages</span></span>
<span class="line"><span>cd ./packages</span></span>
<span class="line"><span>mkdir my-project-a</span></span>
<span class="line"><span>cd ./my-project-a</span></span>
<span class="line"><span>npm init -y</span></span>
<span class="line"><span>mkdir my-project-b</span></span>
<span class="line"><span>cd ./my-project-b</span></span>
<span class="line"><span>npm init -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>启动 pnpm 的 workspace 功能，根目录新增 pnpm-workspace.yaml，指定工作空间的目录：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>packages:</span></span>
<span class="line"><span>  - &quot;packages/**&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当我们配置了指定工作空间的目录后，packages 里的包互相引用时，会自动依赖本地编译的路径，方便实时调试。</p><p>至此我们就解决了 Monorepre 项目的管理包与包之间的依赖关系的问题。</p><h2 id="安装项目内依赖" tabindex="-1">安装项目内依赖 <a class="header-anchor" href="#安装项目内依赖" aria-label="Permalink to &quot;安装项目内依赖&quot;">​</a></h2><p>限制仅允许 pnpm 安装依赖，更新 package.json：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>    &quot;preinstall&quot;: &quot;npx only-allow pnpm&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>安装 eslint 等全局依赖：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>pnpm i eslint -w -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装子项目内独立的依赖：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>cd ./packages/my-project-a</span></span>
<span class="line"><span>pnpm i rollup -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="发布流程" tabindex="-1">发布流程 <a class="header-anchor" href="#发布流程" aria-label="Permalink to &quot;发布流程&quot;">​</a></h2><p>pnpm 没有提供内置的发布流程解决方案，官方推荐了两个开源的版本控制工具：</p><ul><li>changesets</li><li>rush</li></ul><p>changesets 的入手学习成本更低，于是乎选择了 changesets 来管理发布流程。</p><h3 id="安装-changesets" tabindex="-1">安装 changesets <a class="header-anchor" href="#安装-changesets" aria-label="Permalink to &quot;安装 changesets&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> -Dw</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> @changesets/cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>初始化后生成的 .changeset/config.json：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;$schema&quot;: &quot;https://unpkg.com/@changesets/config@2.1.1/schema.json&quot;,</span></span>
<span class="line"><span>  &quot;changelog&quot;: &quot;@changesets/cli/changelog&quot;, // changelog 生成方式</span></span>
<span class="line"><span>  &quot;commit&quot;: false, // 不要让 changeset 在 publish 的时候帮我们做 git add</span></span>
<span class="line"><span>  &quot;fixed&quot;: [],</span></span>
<span class="line"><span>  &quot;linked&quot;: [], // 配置哪些包要共享版本</span></span>
<span class="line"><span>  &quot;access&quot;: &quot;restricted&quot;, // 公私有安全设定，内网建议 restricted ，开源使用 public</span></span>
<span class="line"><span>  &quot;baseBranch&quot;: &quot;master&quot;, // 项目主分支</span></span>
<span class="line"><span>  &quot;updateInternalDependencies&quot;: &quot;patch&quot;, // 确保某包依赖的包发生 upgrade，该包也要发生 version upgrade 的衡量单位（量级）</span></span>
<span class="line"><span>  &quot;ignore&quot;: [] // 不需要变动 version 的包</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="管理-changelog" tabindex="-1">管理 changelog <a class="header-anchor" href="#管理-changelog" aria-label="Permalink to &quot;管理 changelog&quot;">​</a></h3><p>如果是开源库可以安装 @changesets/changelog-github 来管理 changelog。</p><p>安装：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>pnpm add -Dw @changesets/changelog-github</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>更新 .changeset/config.json：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;changelog&quot;: [</span></span>
<span class="line"><span>    &quot;@changesets/changelog-github&quot;,</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;repo&quot;: &quot;worktile/slate-angular&quot; // 改为你的 github 仓储</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果不是开源库，则保持 &quot;changelog&quot;: &quot;@changesets/cli/changelog&quot;。</p><h3 id="生成-changesets" tabindex="-1">生成 changesets <a class="header-anchor" href="#生成-changesets" aria-label="Permalink to &quot;生成 changesets&quot;">​</a></h3><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npx changeset</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>选择要发布的包：</p><p>选择发布的类型：</p><p>填写发布备注：</p><p>确认发布：</p><p>生成临时文件：</p><h3 id="更新版本" tabindex="-1">更新版本 <a class="header-anchor" href="#更新版本" aria-label="Permalink to &quot;更新版本&quot;">​</a></h3><p>更新版本前可以先把开发区的改动提交上去。</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>git add .</span></span>
<span class="line"><span>git commit -m &#39;feat: msg&#39;</span></span>
<span class="line"><span>git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>更新版本：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npx changeset version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>自动生成 CHANGELOG.md 并更新 package.json 中的版本，同时如果子项目间有相互依赖，也会更新依赖版本。</p><h3 id="发布版本" tabindex="-1">发布版本 <a class="header-anchor" href="#发布版本" aria-label="Permalink to &quot;发布版本&quot;">​</a></h3><p>发布至 npm：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npx changeset publish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>至此我们就解决了 Monorepro 项目的在发布其中一个包时，自动更新依赖了该包的其他包并发布的问题。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,93);function k(m,u,b,g,y,v){const a=e,n=i,p=l;return h(),r("div",null,[d,s(a,{readTime:"8",words:"2.4k"}),s(n),s(p)])}const F=t(c,[["render",k]]);export{x as __pageData,F as default};
