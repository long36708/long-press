import{_ as p,a as t,b as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as i,c as o,I as a,a7 as r,o as c}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const C=JSON.parse('{"title":"规范GIT代码提交信息","description":"","frontmatter":{},"headers":[],"relativePath":"tools/规范GIT代码提交信息.md","filePath":"tools/规范GIT代码提交信息.md","lastUpdated":1711902617000}'),u={name:"tools/规范GIT代码提交信息.md"},m=r(`<h1 id="规范git代码提交信息" tabindex="-1">规范GIT代码提交信息 <a class="header-anchor" href="#规范git代码提交信息" aria-label="Permalink to &quot;规范GIT代码提交信息&quot;">​</a></h1><h2 id="约束提交规范" tabindex="-1">约束提交规范 <a class="header-anchor" href="#约束提交规范" aria-label="Permalink to &quot;约束提交规范&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>为了保证每一次的代码提交都是符合规范的，最好的方式就是通过工具来生成和校验;</span></span>
<span class="line"><span>\`commitizen\`是一个nodejs命令行用来格式化commit message工具，通过交互的方式，生成符合规范的git commit；</span></span>
<span class="line"><span>\`husky\` 是一个增强的 git hook 工具，借助husky在每次 commit 时执行 commitlint来检查我们输入的 message。</span></span>
<span class="line"><span>\`commitlint\` 检测提交commit提交记录是否符合规范</span></span>
<span class="line"><span>\`lint-staged\` 检查提交暂存区代码是否符合规范</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="commitizen-安装流程" tabindex="-1">commitizen 安装流程 <a class="header-anchor" href="#commitizen-安装流程" aria-label="Permalink to &quot;commitizen 安装流程&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>   yarn global add commitizen</span></span>
<span class="line"><span>   yarn global add conventional-changelog-cli  // 生成变更记录</span></span>
<span class="line"><span>   yarn global add standard-version  // 进行版本管理自动化</span></span>
<span class="line"><span>   commitizen init cz-conventional-changelog --yarn --dev --exact</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="配置命令" tabindex="-1">配置命令 <a class="header-anchor" href="#配置命令" aria-label="Permalink to &quot;配置命令&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>    // packages.json</span></span>
<span class="line"><span>    &quot;config&quot;: { </span></span>
<span class="line"><span>        &quot;commitizen&quot;: { </span></span>
<span class="line"><span>            &quot;path&quot;: &quot;cz-conventional-changelog&quot; </span></span>
<span class="line"><span>         } </span></span>
<span class="line"><span>     }</span></span>
<span class="line"><span>      &quot;scripts&quot;: {</span></span>
<span class="line"><span>          // 运行脚本在CHANGELOG.md 查看变更记录</span></span>
<span class="line"><span>           &quot;log&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;,</span></span>
<span class="line"><span>           &quot;release&quot;: &quot;standard-version&quot;,</span></span>
<span class="line"><span>           &quot;release:beta&quot;: &quot;standard-version --prerelease beta&quot;,</span></span>
<span class="line"><span>           &quot;release:alpha&quot;: &quot;standard-version --prerelease alpha&quot;,</span></span>
<span class="line"><span>           &quot;release:major&quot;: &quot;standard-version --release-as major&quot;,</span></span>
<span class="line"><span>           &quot;release:minor&quot;: &quot;standard-version --release-as minor&quot;,</span></span>
<span class="line"><span>           &quot;release:patch&quot;: &quot;standard-version --release-as patch&quot;</span></span>
<span class="line"><span>      }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>安装完成后可以使用git cz 来代替git commit,然后根据提示一步步输入即可；</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,9);function d(b,h,q,_,g,v){const s=p,n=t,e=l;return c(),o("div",null,[m,a(s,{readTime:"1",words:"304"}),a(n),a(e)])}const T=i(u,[["render",d]]);export{C as __pageData,T as default};
