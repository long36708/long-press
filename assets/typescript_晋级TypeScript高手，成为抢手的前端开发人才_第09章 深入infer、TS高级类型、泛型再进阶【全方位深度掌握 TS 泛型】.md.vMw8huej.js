import{_ as p,a as t,b as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as e,c as h,I as s,a7 as k,o as r}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const A=JSON.parse('{"title":"第09章 深入infer、TS高级类型、泛型再进阶【全方位深度掌握 TS 泛型】","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/晋级TypeScript高手，成为抢手的前端开发人才/第09章 深入infer、TS高级类型、泛型再进阶【全方位深度掌握 TS 泛型】.md","filePath":"typescript/晋级TypeScript高手，成为抢手的前端开发人才/第09章 深入infer、TS高级类型、泛型再进阶【全方位深度掌握 TS 泛型】.md","lastUpdated":1709471992000}'),d={name:"typescript/晋级TypeScript高手，成为抢手的前端开发人才/第09章 深入infer、TS高级类型、泛型再进阶【全方位深度掌握 TS 泛型】.md"},B=k(`<h1 id="第09章-深入infer、ts高级类型、泛型再进阶【全方位深度掌握-ts-泛型】" tabindex="-1">第09章 深入infer、TS高级类型、泛型再进阶【全方位深度掌握 TS 泛型】 <a class="header-anchor" href="#第09章-深入infer、ts高级类型、泛型再进阶【全方位深度掌握-ts-泛型】" aria-label="Permalink to &quot;第09章 深入infer、TS高级类型、泛型再进阶【全方位深度掌握 TS 泛型】&quot;">​</a></h1><p><strong>5-1 学习 infer+ TS 高级类型的价值和意义</strong></p><p>TypeScript 提供了较多的高级类型，通过学习高级类型可以帮助提高 TS 代码的灵活运用能力， 掌握好这些高级类型能进一步提升我们对泛型的理解和驾驭能力， 让 TS 功底更深厚，把我们的TS水平推向一个更高的层次， 无论以后在项目中运用 TS 还是对理解源码的复杂 TS 泛型语法都有不小的帮助， 由于 TS 高级类型为我们提供了很多技巧性强的功能， 当我们在项目中遇到使用这些功能的应用场景时，会给项目带来更简洁，更轻量级的实现效果， 比如：如果我们项目中只需要查询 key value 数据，那么 Record 类型 就是轻量级的 Map ， 再比如 Omit 快捷 爬取 Todo列表中的数据，保证编辑和预览时的不同效果。</p><h5 id="_5-2-【-infer-】-理解替换-神器-infer-infer和泛型的区别-【原理-使用案例】" tabindex="-1">5-2 【 infer 】 理解替换“神器” infer + infer和泛型的区别 【原理+使用案例】 <a class="header-anchor" href="#_5-2-【-infer-】-理解替换-神器-infer-infer和泛型的区别-【原理-使用案例】" aria-label="Permalink to &quot;5-2 【 infer 】 理解替换“神器” infer + infer和泛型的区别 【原理+使用案例】&quot;">​</a></h5><p><strong>infer 的定义</strong>：infer 表示在 extends 条件语句中以占位符出现的用来修饰数据类型的关键字，被修饰的数据类型等到使用时才能被推断出来。</p><p><strong>infer 占位符式的关键字出现的位置</strong>：通常infer出现在以下三个位置上。</p><p>（1）infer 出现在 extends 条件语句后的函数类型的参数类型位置上</p><p>（2）infer 出现在 extends 条件语句后的函数类型的返回值类型上</p><p>（3） infer 会出现在类型的泛型具体化类型上。</p><ul><li>作用：infer 用来推断函数类型的参数类型和返回值类型，以及泛型具体化类型。</li></ul><h4 id="一个类有双重性质-既是构造函数对象变量-又是类型" tabindex="-1">一个类有双重性质，既是构造函数对象变量，又是类型 <a class="header-anchor" href="#一个类有双重性质-既是构造函数对象变量-又是类型" aria-label="Permalink to &quot;一个类有双重性质，既是构造函数对象变量，又是类型&quot;">​</a></h4><p>typeof People // People-构造函数对象变量</p><p>new People() // People-类型</p><h5 id="_5-5-【ts-高级-type-类型】-详尽解说-extract-不同场景下的不同理解-和类型断言的异同" tabindex="-1">5-5 【TS 高级 type 类型】 详尽解说 Extract 不同场景下的不同理解+ 和类型断言的异同** <a class="header-anchor" href="#_5-5-【ts-高级-type-类型】-详尽解说-extract-不同场景下的不同理解-和类型断言的异同" aria-label="Permalink to &quot;5-5 【TS 高级 type 类型】 详尽解说 Extract 不同场景下的不同理解+ 和类型断言的异同**&quot;">​</a></h5><p><strong>本节课程安排：</strong></p><p>(1) 详解 Extract.ts</p><p>Extract&lt;A, B&gt; 读作 A中的每个元素是否都属于B，如果属于则返回A，否则返回never</p><p>(2) 从结果上详细对比的 Extract 泛型约束和类型断言【父子类】</p><p>子类可以断言为父类，父类也可以断言为子类</p><p>子类可以extends父类，父类不可以extends子类</p><p>(3) 从结果上详细对比 Extract 泛型约束和类型断言【联合类型】</p><p>(4) 从结果上详细对比 Extract 泛型约束和类型断言 【函数】</p><p>函数类型上的泛型约束 参数类型和返回值完全相同的情况下， 参数少的函数类型 extends 参数多的函数类型 返回true 参数多的函数类型 extends 参数少的函数类型 返回false</p><ul><li>Extract 是TS提供的一个TS高级type类型【简称TS高级类型】</li><li>Extract 在 父类和子类中应用 <ul><li>定律：子类 extends 父类=&gt;子类 extends 父类永远返回true=&gt;返回T类型</li><li>定律: 父类 extends 子类=&gt;父类 extends 子类返回false 因为父类继承子类本身不成立，所以一般都为false</li><li>但如果希望人为制造一个true 那只有子类实例属性或实例方法个数必须和父类一样多</li></ul></li></ul><h5 id="_5-6【ts-高级-type-类型】-详尽解说-exclude-【掌握-omit-前-必会-】" tabindex="-1">5-6【TS 高级 type 类型】 详尽解说 Exclude 【掌握 Omit 前 必会 】** <a class="header-anchor" href="#_5-6【ts-高级-type-类型】-详尽解说-exclude-【掌握-omit-前-必会-】" aria-label="Permalink to &quot;5-6【TS 高级 type 类型】 详尽解说 Exclude 【掌握 Omit 前 必会 】**&quot;">​</a></h5><p><strong>本节课程安排：</strong></p><p>（1）type 类型在 Exclude 中的理解</p><p>（2）联合类型在 Exclude 的 分解理解</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Exclude</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> U</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> never</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从T中排除U</p><ul><li>排除条件成立的类型，保留不符合泛型约束条件的类型</li></ul><h5 id="_5-7-【ts-高级-type-类型】-完成异步数据扁平化-轻量级-map-【真实应用场景】" tabindex="-1">5-7 【TS 高级 type 类型】 完成异步数据扁平化(轻量级 Map)【真实应用场景】** <a class="header-anchor" href="#_5-7-【ts-高级-type-类型】-完成异步数据扁平化-轻量级-map-【真实应用场景】" aria-label="Permalink to &quot;5-7 【TS 高级 type 类型】 完成异步数据扁平化(轻量级 Map)【真实应用场景】**&quot;">​</a></h5><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Record</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	[</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">P</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> keyof</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>本讲课程安排：</p><ol><li>复习+理解 泛型 K extends keyof 泛型 T</li><li>深入理解 K extends keyof any 【K extends keyof string |number |symbol</li><li>理解 P in K<br> in 映射类型的关键字，用来遍历泛型K的所有属性</li><li>理解 K in keyof any [x: string] 可以代表[x: string] 也可以表示[x: number] [x: string]可以是字符串类型，数字类型 symbol类型</li><li>深入 Record 完成异步数据扁平化 【 实现方式1 】</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>	 type Record2&lt;T&gt; = {</span></span>
<span class="line"><span>			[x: string]: T,// 字符串索引可以是数字类型,可以是字符串类型，最终都会转换为字符串类型</span></span>
<span class="line"><span>		//[x: number]: T,// 字符串索引可以是数字类型 [x: number]可以最终合成一个数组的索引</span></span>
<span class="line"><span>		//[x:symbol]:T//索引签名参数类型必须为 &quot;string&quot; 或 &quot;number&quot;</span></span>
<span class="line"><span>	 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="6"><li><p>深入 Record 完成异步数据扁平化 【 实现方式2 】</p></li><li><p>object 和 Map 和 Record 区别 Record和object区别 区别1：Record 获取到是索引参数类型，所以可以赋初值为{},而object也可以，但是再次赋值 区别2： Record是泛型，获取值可以有自动提示功能，而object无法实现自动提示。</p><p>实际开发为什么我们在显示数据，数据扁平化时用Record 原因1：是因为Record有多种实现方式，比如S100实现方式，Map就需要改底层源码才能做到【一般是不会改的】 原因2：Record是属于一个轻量级的type类型,Map相对Record是重量级,而且Map需要new出来的，所以要更加占用内存空间, 如果读取数据和显示数据频繁，就应该采用Record, 如果增删改比较多，那还是使用Map Record类型对于取出来的对象，可以自动提示输出对象的属性和方法</p></li></ol><h5 id="_5-8-高级类型-pick" tabindex="-1">5-8 高级类型 Pick <a class="header-anchor" href="#_5-8-高级类型-pick" aria-label="Permalink to &quot;5-8   高级类型 Pick&quot;">​</a></h5><p>本讲课程安排：</p><p>1 首先实现 Pick 快速抓取属性</p><p>Pick 主要用于提取某种数据类型的属性，但实际工作中，主要用来提取接口或 type 定义的对象类型中的属性</p><p>2 Pick+ Record 结合应用【真实应用场景】</p><h5 id="_5-10【-ts-高级-type-类型】-partial-required-readonly" tabindex="-1">5-10【 TS 高级 type 类型】 Partial+Required+ReadOnly <a class="header-anchor" href="#_5-10【-ts-高级-type-类型】-partial-required-readonly" aria-label="Permalink to &quot;5-10【 TS 高级 type 类型】 Partial+Required+ReadOnly&quot;">​</a></h5><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// Partial 一次性全部变成可选选项的type高级类型</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Partial</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	[</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">P</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> keyof</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">P</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> ButtonProps</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	type</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;button&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;submit&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&#39;reset&#39;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	text</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">string</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	disabled</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">boolean</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">	onClick</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: () </span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> void</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> props</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Partial</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">ButtonProps</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	text</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &quot;登录&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// Required 和Partial相反 一次性全部变成必选选项的type高级类型</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Required</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">	[</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">P</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> keyof</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]-</span><span style="--shiki-light:#000000;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">P</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//  ReadOnly 一次性全部变成可读选项的type高级类型</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> ReadOnly</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">	readonly</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">P</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> keyof</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">P</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h5 id="_5-11-【-ts-高级-type-类型】-环环相扣掌握-omit-反向抓取属性数据-【真实应用场景】" tabindex="-1">5-11 【 TS 高级 type 类型】 环环相扣掌握 Omit 反向抓取属性数据 【真实应用场景】 <a class="header-anchor" href="#_5-11-【-ts-高级-type-类型】-环环相扣掌握-omit-反向抓取属性数据-【真实应用场景】" aria-label="Permalink to &quot;5-11 【 TS 高级 type 类型】 环环相扣掌握 Omit 反向抓取属性数据 【真实应用场景】&quot;">​</a></h5><p>Omit - 省略，忽略，去掉</p><p>本节课程安排：</p><p>（1） 理解 Exclude&lt;keyof T, K&gt;</p><p>（2） 理解 Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</p><p>（3） 理解 type Omit&lt;T, K extends keyof T&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Omit</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;"> keyof</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Pick</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Exclude</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">keyof</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Todo</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	title</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">string</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	completed</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">boolean</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	description</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">string</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// phone: number</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> TodoPreview</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;"> Omit</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">Todo</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;">&quot;description&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// type TodoPreview={}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> todo</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#267F99;--shiki-dark:#E5C07B;">TodoPreview</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	title</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#98C379;"> &#39;Clean room&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">	completed</span><span style="--shiki-light:#001080;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>as- 重映射</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,53);function y(c,g,o,F,b,u){const i=p,a=t,n=l;return r(),h("div",null,[B,s(i,{readTime:"6",words:"1.8k"}),s(a),s(n)])}const f=e(d,[["render",y]]);export{A as __pageData,f as default};
