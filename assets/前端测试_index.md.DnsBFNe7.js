import{_ as l,a as i,b as o}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as s,c as n,I as e,a7 as h,o as p}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const U=JSON.parse('{"title":"前端测试","description":"","frontmatter":{},"headers":[],"relativePath":"前端测试/index.md","filePath":"前端测试/index.md","lastUpdated":1719038302000}'),c={name:"前端测试/index.md"},u=h('<h1 id="前端测试" tabindex="-1">前端测试 <a class="header-anchor" href="#前端测试" aria-label="Permalink to &quot;前端测试&quot;">​</a></h1><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>这边指的测试是指白盒测试，用代码来测试代码。</p><p>测试有利于提升代码质量。</p><ul><li>代码功能和需求一致。根据需求，写测试。测试通过了，则表明需求实现了。</li><li>保证代码重构后，未改坏以前的功能。代码重构后，能通过原有的测试。</li></ul><p>测试的另一个好处是，可以通过现有测试，来直观的了解需求。</p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="测试类型" tabindex="-1">测试类型 <a class="header-anchor" href="#测试类型" aria-label="Permalink to &quot;测试类型&quot;">​</a></h3><p>根据测试对象类型不同，测试包含如下类型：</p><ul><li>单元测试</li><li>UI 测试</li><li>接口测试</li></ul><h4 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h4><p>单元测试的测试对象主要是函数和组件。</p><p>测试传不同的参数或属性值，返回值是否和预期一致，报错情况是否与预期一致，回调函数的执行情况是否和预期一致，造成的副作用是否和预期一致。副作用包括 DOM 操作，BOM 操作。</p><p>用 Jest 测试函数的 <a href="./jest/src">Demo</a>。</p><p>在 React 中测试组件的 <a href="./react/jest/src/components/counter.spec.js">Demo</a></p><h4 id="ui-测试" tabindex="-1">UI 测试 <a class="header-anchor" href="#ui-测试" aria-label="Permalink to &quot;UI 测试&quot;">​</a></h4><p>UI 测试的测试对象是 UI。</p><p>测试在页面未做过交互或交互(如点击，输入）后，UI 的结果是否和预期一致。</p><p>手写 UI 测试用例工作量很大。常用的 2 种 替换方式是：截图比较(Snapshot Testing) 和 UI 自动化测试。</p><p>截图比较是当前程序生成的 UI 的截图 和 之前程序生成的 UI 的截图比较。第一次运行程序要生成截图。当 UI 改动后，可以更新截图。截图适用用检查代码重构后，是否改坏了 UI。在 React 测试截图的 <a href="./react/jest/src/components/screenshot.spec.js">Demo</a></p><p>UI 自动化测试 需要 录制测试脚本。根据测试脚本生成对应的测试用例代码。以后每次运行测试用例，就是执行录制脚本中的操作。具体看 UI 自动化录制工具: <a href="https://github.com/alibaba/uirecorder/blob/master/README_zh-cn.md" target="_blank" rel="noreferrer">UI Recorder</a>。</p><h4 id="接口测试" tabindex="-1">接口测试 <a class="header-anchor" href="#接口测试" aria-label="Permalink to &quot;接口测试&quot;">​</a></h4><p>接口测试的测试对象是 API 接口。</p><p>调 API 接口，传不同的参数，接口返回的结果是否和预期一致。</p><h3 id="衡量测试的效果" tabindex="-1">衡量测试的效果 <a class="header-anchor" href="#衡量测试的效果" aria-label="Permalink to &quot;衡量测试的效果&quot;">​</a></h3><p>用测试覆盖率来衡量测试的效果。</p><h3 id="工具库" tabindex="-1">工具库 <a class="header-anchor" href="#工具库" aria-label="Permalink to &quot;工具库&quot;">​</a></h3><ul><li>测试框架 <ul><li><a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a>。 VSCode 插件 <ul><li><a href="https://marketplace.visualstudio.com/items?itemName=firsttris.vscode-jest-runner" target="_blank" rel="noreferrer">Jest Runner</a> 单独运行某个用例</li><li><a href="https://marketplace.visualstudio.com/items?itemName=andys8.jest-snippets" target="_blank" rel="noreferrer">Jest Snippets</a></li></ul></li><li>Mocha</li></ul></li><li>断言库 <ul><li><a href="https://github.com/power-assert-js/power-assert" target="_blank" rel="noreferrer">Power-asset</a></li><li><a href="https://www.chaijs.com/" target="_blank" rel="noreferrer">Chai</a></li></ul></li><li>Spies，Stub, Mock, Fake 等 <ul><li><a href="https://sinonjs.org/" target="_blank" rel="noreferrer">SINON.JS</a></li></ul></li><li>E2E 测试 <ul><li><a href="https://github.com/enzymejs/enzyme" target="_blank" rel="noreferrer">Enzyme</a></li><li><a href="https://www.cypress.io/" target="_blank" rel="noreferrer">cypress</a></li><li><a href="https://nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch.js</a></li></ul></li><li>无头浏览器 <ul><li><a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noreferrer">Puppeteer</a></li><li><a href="https://phantomjs.org/" target="_blank" rel="noreferrer">PhantomJS</a></li></ul></li><li>UI 自动化工具 <ul><li><a href="https://github.com/alibaba/uirecorder/blob/master/README_zh-cn.md" target="_blank" rel="noreferrer">UI Recorder</a></li></ul></li><li>测试覆盖率 <ul><li><a href="https://istanbul.js.org/" target="_blank" rel="noreferrer">istanbul</a></li></ul></li></ul><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>',29);function d(m,b,f,_,k,g){const a=l,r=i,t=o;return p(),n("div",null,[u,e(a,{readTime:"2",words:"693"}),e(r),e(t)])}const j=s(c,[["render",d]]);export{U as __pageData,j as default};
