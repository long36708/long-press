import{_ as t,a as e,b as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.BCVHfIj7.js";import{_ as h,c as r,I as s,a7 as p,o as k}from"./chunks/framework.DGCt2JJv.js";import"./chunks/dayjs.min.DZyl58SH.js";const F=JSON.parse('{"title":"长列表优化","description":"","frontmatter":{},"headers":[],"relativePath":"性能优化/长列表优化.md","filePath":"性能优化/长列表优化.md","lastUpdated":1719038302000}'),o={name:"性能优化/长列表优化.md"},c=p(`<h1 id="长列表优化" tabindex="-1">长列表优化 <a class="header-anchor" href="#长列表优化" aria-label="Permalink to &quot;长列表优化&quot;">​</a></h1><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><p>长列表指列表包含的子项很多的列表。长列表会导致的问题是，DOM 数量多，页面卡顿。</p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>减少 DOM 的数量。常见的两种方案:</p><ol><li>分页。</li><li><a href="https://github.com/iamjoel/fe-solution/blob/main/src/performance/large-list/react/react-paginate" target="_blank" rel="noreferrer">react-paginate</a>: 基于 React。</li><li>虚拟列表。 复用 DOM 节点，渲染当前可视范围内及部分相邻的子项。Demo:</li><li><a href="https://github.com/iamjoel/fe-solution/blob/main/src/performance/large-list/react/react-window" target="_blank" rel="noreferrer">react-window</a>: 基于 React。</li></ol><h2 id="列表滚动无限加载" tabindex="-1">列表滚动无限加载 <a class="header-anchor" href="#列表滚动无限加载" aria-label="Permalink to &quot;列表滚动无限加载&quot;">​</a></h2><h3 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h3><p>列表滚动无限加载只在滚动到列表底部时，加载下一页的数据。</p><p>相比拿所有数据都渲染出来，这么做服务器的返回速度更快，对服务器端压力更小，前端渲染的节点也变少的，滚动会比较流畅。</p><p>如果数据特别多，导致滚动卡顿，可以用虚拟列表来优化。</p><h3 id="解决方案-1" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案-1" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p>列表滚动无限加载主要解决：如何判断列表滚动到底部。</p><p>列表滚动到底部时，列表的总高度 减去 已滚动的高度 为 列表视口的高度。</p><p>用 DOM 的 API 表述为:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes light-plus one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 列表的总高度</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> totalHeight</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> listDOM</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">scrollHeight</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 已滚动的高度</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> scrollTop</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> listDOM</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">scrollTop</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 视口的高度</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#E5C07B;"> clientHeight</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#001080;--shiki-dark:#E5C07B;"> listDOM</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">clientHeight</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 滚动到底部了</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;">totalHeight</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> clientHeight</span><span style="--shiki-light:#000000;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#001080;--shiki-dark:#E06C75;"> scrollTop</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#61AFEF;">  loadMore</span><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,17);function d(g,b,m,y,u,_){const i=t,a=e,n=l;return k(),r("div",null,[c,s(i,{readTime:"1",words:"347"}),s(a),s(n)])}const E=h(o,[["render",d]]);export{F as __pageData,E as default};
